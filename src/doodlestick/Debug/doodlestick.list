
doodlestick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002864  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a8c  08002a8c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a8c  08002a8c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a8c  08002a8c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  2000001c  08002ab0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08002ab0  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f1f  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011eb  00000000  00000000  00025fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000271a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000537  00000000  00000000  00027890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025167  00000000  00000000  00027dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006072  00000000  00000000  0004cf2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e69ef  00000000  00000000  00052fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001af8  00000000  00000000  00139990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029d4 	.word	0x080029d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080029d4 	.word	0x080029d4

080001c8 <get_joystick_button>:
	}
}*/

// gets the value of the button where 1 is being pressed and 0 is not pressed
uint8_t get_joystick_button()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	return !(GPIOA->IDR & GPIO_IDR_ID4);
 80001cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001d0:	691b      	ldr	r3, [r3, #16]
 80001d2:	f003 0310 	and.w	r3, r3, #16
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	bf0c      	ite	eq
 80001da:	2301      	moveq	r3, #1
 80001dc:	2300      	movne	r3, #0
 80001de:	b2db      	uxtb	r3, r3
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
	...

080001ec <joystick_button_init>:

// initializes the GPIO pin PA4 as the input from the active low joystick button
void joystick_button_init()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	// starts the GPIOA peripheral clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <joystick_button_init+0x4c>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a10      	ldr	r2, [pc, #64]	; (8000238 <joystick_button_init+0x4c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c

	// input mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE4);
 80001fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800020a:	6013      	str	r3, [r2, #0]

	// pull up resistor
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4);
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800021a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (GPIO_PUPDR_PUPD4_0);
 800021c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800022a:	60d3      	str	r3, [r2, #12]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000

0800023c <ycoord_start_conversion>:

// starts the ADC conversion for the y coordinate
void ycoord_start_conversion()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	// Vref for y is the input to ADC2
	ADC2->CR |= ADC_CR_ADSTART;
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <ycoord_start_conversion+0x1c>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <ycoord_start_conversion+0x1c>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6093      	str	r3, [r2, #8]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	50040100 	.word	0x50040100

0800025c <xcoord_start_conversion>:

// starts the ADC conversion for the x coordinate
void xcoord_start_conversion()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	// Vref for x is the input to ADC1
	ADC1->CR |= ADC_CR_ADSTART;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <xcoord_start_conversion+0x1c>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <xcoord_start_conversion+0x1c>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6093      	str	r3, [r2, #8]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	50040000 	.word	0x50040000

0800027c <ycoord_adc_init>:

// initializes ADC2 for reading the Y coordinate on PA1
void ycoord_adc_init()
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
	// turns on the clock for ADC
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000282:	4b53      	ldr	r3, [pc, #332]	; (80003d0 <ycoord_adc_init+0x154>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	4a52      	ldr	r2, [pc, #328]	; (80003d0 <ycoord_adc_init+0x154>)
 8000288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028c:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0);
 800028e:	4b51      	ldr	r3, [pc, #324]	; (80003d4 <ycoord_adc_init+0x158>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000296:	4a4f      	ldr	r2, [pc, #316]	; (80003d4 <ycoord_adc_init+0x158>)
 8000298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800029c:	6093      	str	r3, [r2, #8]

	// make sure conversion isn't started
	ADC2->CR &= ~(ADC_CR_ADSTART);
 800029e:	4b4e      	ldr	r3, [pc, #312]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	4a4d      	ldr	r2, [pc, #308]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002a4:	f023 0304 	bic.w	r3, r3, #4
 80002a8:	6093      	str	r3, [r2, #8]

	// take the ADC out of deep power down mode
	ADC2->CR &= ~(ADC_CR_DEEPPWD);
 80002aa:	4b4b      	ldr	r3, [pc, #300]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a4a      	ldr	r2, [pc, #296]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002b4:	6093      	str	r3, [r2, #8]

	// enable to voltage regulator guards the voltage
	ADC2->CR |= (ADC_CR_ADVREGEN);
 80002b6:	4b48      	ldr	r3, [pc, #288]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a47      	ldr	r2, [pc, #284]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c0:	6093      	str	r3, [r2, #8]

	// delay at least 20 microseconds (to power up) before calibration
	for(uint16_t i =0; i<1000; i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	e00b      	b.n	80002e0 <ycoord_adc_init+0x64>
		for(uint16_t j = 0;  j<100; j++); //delay at least 20us
 80002c8:	2300      	movs	r3, #0
 80002ca:	80bb      	strh	r3, [r7, #4]
 80002cc:	e002      	b.n	80002d4 <ycoord_adc_init+0x58>
 80002ce:	88bb      	ldrh	r3, [r7, #4]
 80002d0:	3301      	adds	r3, #1
 80002d2:	80bb      	strh	r3, [r7, #4]
 80002d4:	88bb      	ldrh	r3, [r7, #4]
 80002d6:	2b63      	cmp	r3, #99	; 0x63
 80002d8:	d9f9      	bls.n	80002ce <ycoord_adc_init+0x52>
	for(uint16_t i =0; i<1000; i++)
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	3301      	adds	r3, #1
 80002de:	80fb      	strh	r3, [r7, #6]
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002e6:	d3ef      	bcc.n	80002c8 <ycoord_adc_init+0x4c>

	// calibrate, you need to digitally calibrate
	ADC2->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); //ensure ADC is not enabled, also choose single ended calibration
 80002e8:	4b3b      	ldr	r3, [pc, #236]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a3a      	ldr	r2, [pc, #232]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADCAL;       // start calibration
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a36      	ldr	r2, [pc, #216]	; (80003d8 <ycoord_adc_init+0x15c>)
 80002fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000302:	6093      	str	r3, [r2, #8]
	while(ADC2->CR & ADC_CR_ADCAL); // wait for calibration
 8000304:	bf00      	nop
 8000306:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	dbfb      	blt.n	8000306 <ycoord_adc_init+0x8a>

	// configure single ended mode before enabling ADC
	ADC2->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_6); // PA1 is ADC1_IN6 (found via nucleo_board.pdf), single ended mode, DIFFERENT PER CHANNEL
 800030e:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000314:	4a30      	ldr	r2, [pc, #192]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800031a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	ADC2->SMPR1 |= 0x7 << 18; // configures sample period, DIFFERENT FOR EACH CHANNEL
 800031e:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000324:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000328:	6153      	str	r3, [r2, #20]

	// enable ADC
	ADC2->ISR |= (ADC_ISR_ADRDY); // tells hardware that ADC is ready for conversion
 800032a:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <ycoord_adc_init+0x15c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]
	ADC2->CR |= ADC_CR_ADEN; // enables the ADC
 8000336:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4a27      	ldr	r2, [pc, #156]	; (80003d8 <ycoord_adc_init+0x15c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6093      	str	r3, [r2, #8]
	while(!(ADC2->ISR & ADC_ISR_ADRDY)); // waits until the ADC sets this flag low
 8000342:	bf00      	nop
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f9      	beq.n	8000344 <ycoord_adc_init+0xc8>
	ADC2->ISR |= (ADC_ISR_ADRDY); // sets the flag high again
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a20      	ldr	r2, [pc, #128]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6013      	str	r3, [r2, #0]

	// configure ADC
	ADC2->SQR1 = (ADC2->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) |(6 << ADC_SQR1_SQ1_Pos); // DIFFERENT PER CHANNEL
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <ycoord_adc_init+0x15c>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	f423 63f9 	bic.w	r3, r3, #1992	; 0x7c8
 8000364:	f023 0307 	bic.w	r3, r3, #7
 8000368:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <ycoord_adc_init+0x15c>)
 800036a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->ISR &= ~(ADC_ISR_EOC); // clears end of conversion flag
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000376:	f023 0304 	bic.w	r3, r3, #4
 800037a:	6013      	str	r3, [r2, #0]

	// enables interrupts
	ADC2->IER |= (ADC_IER_EOC); // enables ADC interrupt
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <ycoord_adc_init+0x15c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a15      	ldr	r2, [pc, #84]	; (80003d8 <ycoord_adc_init+0x15c>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6053      	str	r3, [r2, #4]
	NVIC->ISER[0] |= (1 << (ADC1_2_IRQn & 0x1F)); // enables NVIC interrupt
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <ycoord_adc_init+0x160>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a13      	ldr	r2, [pc, #76]	; (80003dc <ycoord_adc_init+0x160>)
 800038e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000392:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000394:	b662      	cpsie	i
}
 8000396:	bf00      	nop
	__enable_irq(); // enables ARM interrupts

	//configure GPIO pin PA0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); 	// enables the GPIOA peripheral clock
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <ycoord_adc_init+0x154>)
 800039a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <ycoord_adc_init+0x154>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= (GPIO_MODER_MODE1); 	// analog mode for PA1
 80003a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ae:	f043 030c 	orr.w	r3, r3, #12
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOA->ASCR |= GPIO_ASCR_ASC1; 			// set PA1 to analog
 80003b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	50040300 	.word	0x50040300
 80003d8:	50040100 	.word	0x50040100
 80003dc:	e000e100 	.word	0xe000e100

080003e0 <xcoord_adc_init>:

// initializes ADC1 for reading the X coordinate on PA0
void xcoord_adc_init()
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
//	// configures the system clock to be 32MHz for ADC
//	SystemClock_Config();

	// turns on the clock for ADC
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80003e6:	4b53      	ldr	r3, [pc, #332]	; (8000534 <xcoord_adc_init+0x154>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a52      	ldr	r2, [pc, #328]	; (8000534 <xcoord_adc_init+0x154>)
 80003ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC123_COMMON->CCR = ((ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE)) | ADC_CCR_CKMODE_0);
 80003f2:	4b51      	ldr	r3, [pc, #324]	; (8000538 <xcoord_adc_init+0x158>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003fa:	4a4f      	ldr	r2, [pc, #316]	; (8000538 <xcoord_adc_init+0x158>)
 80003fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000400:	6093      	str	r3, [r2, #8]

	// make sure conversion isn't started
	ADC1->CR &= ~(ADC_CR_ADSTART);
 8000402:	4b4e      	ldr	r3, [pc, #312]	; (800053c <xcoord_adc_init+0x15c>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	4a4d      	ldr	r2, [pc, #308]	; (800053c <xcoord_adc_init+0x15c>)
 8000408:	f023 0304 	bic.w	r3, r3, #4
 800040c:	6093      	str	r3, [r2, #8]

	// take the ADC out of deep power down mode
	ADC1->CR &= ~(ADC_CR_DEEPPWD);
 800040e:	4b4b      	ldr	r3, [pc, #300]	; (800053c <xcoord_adc_init+0x15c>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	4a4a      	ldr	r2, [pc, #296]	; (800053c <xcoord_adc_init+0x15c>)
 8000414:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000418:	6093      	str	r3, [r2, #8]

	// enable to voltage regulator guards the voltage
	ADC1->CR |= (ADC_CR_ADVREGEN);
 800041a:	4b48      	ldr	r3, [pc, #288]	; (800053c <xcoord_adc_init+0x15c>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a47      	ldr	r2, [pc, #284]	; (800053c <xcoord_adc_init+0x15c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	6093      	str	r3, [r2, #8]

	// delay at least 20 microseconds (to power up) before calibration
	for(uint16_t i =0; i<1000; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	80fb      	strh	r3, [r7, #6]
 800042a:	e00b      	b.n	8000444 <xcoord_adc_init+0x64>
		for(uint16_t j = 0;  j<100; j++); //delay at least 20us
 800042c:	2300      	movs	r3, #0
 800042e:	80bb      	strh	r3, [r7, #4]
 8000430:	e002      	b.n	8000438 <xcoord_adc_init+0x58>
 8000432:	88bb      	ldrh	r3, [r7, #4]
 8000434:	3301      	adds	r3, #1
 8000436:	80bb      	strh	r3, [r7, #4]
 8000438:	88bb      	ldrh	r3, [r7, #4]
 800043a:	2b63      	cmp	r3, #99	; 0x63
 800043c:	d9f9      	bls.n	8000432 <xcoord_adc_init+0x52>
	for(uint16_t i =0; i<1000; i++)
 800043e:	88fb      	ldrh	r3, [r7, #6]
 8000440:	3301      	adds	r3, #1
 8000442:	80fb      	strh	r3, [r7, #6]
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800044a:	d3ef      	bcc.n	800042c <xcoord_adc_init+0x4c>

	// calibrate, you need to digitally calibrate
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); //ensure ADC is not enabled, also choose single ended calibration
 800044c:	4b3b      	ldr	r3, [pc, #236]	; (800053c <xcoord_adc_init+0x15c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a3a      	ldr	r2, [pc, #232]	; (800053c <xcoord_adc_init+0x15c>)
 8000452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000456:	f023 0301 	bic.w	r3, r3, #1
 800045a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;       // start calibration
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <xcoord_adc_init+0x15c>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a36      	ldr	r2, [pc, #216]	; (800053c <xcoord_adc_init+0x15c>)
 8000462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000466:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & ADC_CR_ADCAL); // wait for calibration
 8000468:	bf00      	nop
 800046a:	4b34      	ldr	r3, [pc, #208]	; (800053c <xcoord_adc_init+0x15c>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	2b00      	cmp	r3, #0
 8000470:	dbfb      	blt.n	800046a <xcoord_adc_init+0x8a>

	// configure single ended mode before enabling ADC
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5); // PA0 is ADC1_IN5 (found via nucleo_board.pdf), single ended mode
 8000472:	4b32      	ldr	r3, [pc, #200]	; (800053c <xcoord_adc_init+0x15c>)
 8000474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000478:	4a30      	ldr	r2, [pc, #192]	; (800053c <xcoord_adc_init+0x15c>)
 800047a:	f023 0320 	bic.w	r3, r3, #32
 800047e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	ADC1->SMPR1 |= 0x7 << 15; // configures sample period, DIFFERENT FOR EACH CHANNEL
 8000482:	4b2e      	ldr	r3, [pc, #184]	; (800053c <xcoord_adc_init+0x15c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a2d      	ldr	r2, [pc, #180]	; (800053c <xcoord_adc_init+0x15c>)
 8000488:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 800048c:	6153      	str	r3, [r2, #20]

	// enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY); // tells hardware that ADC is ready for conversion
 800048e:	4b2b      	ldr	r3, [pc, #172]	; (800053c <xcoord_adc_init+0x15c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a2a      	ldr	r2, [pc, #168]	; (800053c <xcoord_adc_init+0x15c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN; // enables the ADC
 800049a:	4b28      	ldr	r3, [pc, #160]	; (800053c <xcoord_adc_init+0x15c>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	4a27      	ldr	r2, [pc, #156]	; (800053c <xcoord_adc_init+0x15c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_ADRDY)); // waits until the ADC sets this flag low
 80004a6:	bf00      	nop
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <xcoord_adc_init+0x15c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f9      	beq.n	80004a8 <xcoord_adc_init+0xc8>
	ADC1->ISR |= (ADC_ISR_ADRDY); // sets the flag high again
 80004b4:	4b21      	ldr	r3, [pc, #132]	; (800053c <xcoord_adc_init+0x15c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a20      	ldr	r2, [pc, #128]	; (800053c <xcoord_adc_init+0x15c>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]

	// configure ADC
	ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1_Msk | ADC_SQR1_L_Msk)) |(5 << ADC_SQR1_SQ1_Pos); // DIFFERENT PER CHANNEL
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <xcoord_adc_init+0x15c>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	f423 63f9 	bic.w	r3, r3, #1992	; 0x7c8
 80004c8:	f023 0307 	bic.w	r3, r3, #7
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <xcoord_adc_init+0x15c>)
 80004ce:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->ISR &= ~(ADC_ISR_EOC); // clears end of conversion flag
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <xcoord_adc_init+0x15c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <xcoord_adc_init+0x15c>)
 80004da:	f023 0304 	bic.w	r3, r3, #4
 80004de:	6013      	str	r3, [r2, #0]

	// enables interrupts
	ADC1->IER |= (ADC_IER_EOC); // enables ADC interrupt
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <xcoord_adc_init+0x15c>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a15      	ldr	r2, [pc, #84]	; (800053c <xcoord_adc_init+0x15c>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6053      	str	r3, [r2, #4]
	NVIC->ISER[0] |= (1 << (ADC1_2_IRQn & 0x1F)); // enables NVIC interrupt
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <xcoord_adc_init+0x160>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <xcoord_adc_init+0x160>)
 80004f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004f8:	b662      	cpsie	i
}
 80004fa:	bf00      	nop
	__enable_irq(); // enables ARM interrupts

	//configure GPIO pin PA0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); 	// enables the GPIOA peripheral clock
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <xcoord_adc_init+0x154>)
 80004fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <xcoord_adc_init+0x154>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= (GPIO_MODER_MODE0); 	// analog mode for PA0
 8000508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000512:	f043 0303 	orr.w	r3, r3, #3
 8000516:	6013      	str	r3, [r2, #0]
	GPIOA->ASCR |= GPIO_ASCR_ASC0; 			// set PA0 to analog
 8000518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	62d3      	str	r3, [r2, #44]	; 0x2c

//	// start conversion
//	ADC1->CR |= ADC_CR_ADSTART;
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	50040300 	.word	0x50040300
 800053c:	50040000 	.word	0x50040000
 8000540:	e000e100 	.word	0xe000e100

08000544 <Error_Handler>:
	ycoord_adc_init();
}

// error handler for system clock configuration
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>

0800054e <SystemClock_Config>:
}


// configures the system clock to 32MHz
void SystemClock_Config(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b096      	sub	sp, #88	; 0x58
 8000552:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2244      	movs	r2, #68	; 0x44
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fa0d 	bl	800297c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000570:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000574:	f001 fbe4 	bl	8001d40 <HAL_PWREx_ControlVoltageScaling>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800057e:	f7ff ffe1 	bl	8000544 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000582:	2310      	movs	r3, #16
 8000584:	617b      	str	r3, [r7, #20]
	//RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
	#define RCC_MSIRANGE_7                 MSI = 8 MHz
	#define RCC_MSIRANGE_8                 MSI = 16 MHz
	#define RCC_MSIRANGE_9                 MSI = 24 MHz
	#define RCC_MSIRANGE_10                MSI = 32 MHz
	#define RCC_MSIRANGE_11                MSI = 48 MHz   dont use this one*/
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
 800058e:	2301      	movs	r3, #1
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fc26 	bl	8001dec <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x5c>
	{
		Error_Handler();
 80005a6:	f7ff ffcd 	bl	8000544 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
									| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 ffee 	bl	80025a4 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80005ce:	f7ff ffb9 	bl	8000544 <Error_Handler>
	}
}
 80005d2:	bf00      	nop
 80005d4:	3758      	adds	r7, #88	; 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <USART_init>:
void USART_Escape_Code(const char* msg);
void USART_init();


void USART_init()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	// configure GPIO pins for USART2 (PA2, PA3) follow order of configuring registers
	// AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <USART_init+0xbc>)
 80005e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e4:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <USART_init+0xbc>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);		// mask AF selection
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	6a1b      	ldr	r3, [r3, #32]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |			// select USART2 (AF7)
 80005fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000606:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800060a:	6213      	str	r3, [r2, #32]
				   (7 << GPIO_AFRL_AFSEL3_Pos));

	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);	// enable alternate function
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800061a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);    // for PA2 and PA3
 800061c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000626:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800062a:	6013      	str	r3, [r2, #0]

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;	// enable USART by turning on system clock
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <USART_init+0xbc>)
 800062e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <USART_init+0xbc>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000636:	6593      	str	r3, [r2, #88]	; 0x58

	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);	// set data to 8 bits
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <USART_init+0xc0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <USART_init+0xc0>)
 800063e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000642:	6013      	str	r3, [r2, #0]
	USART2->BRR = F_CLK / 115200;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <USART_init+0xc0>)
 8000646:	f240 1215 	movw	r2, #277	; 0x115
 800064a:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);		// enable transmit and receive for USART
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <USART_init+0xc0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <USART_init+0xc0>)
 8000652:	f043 030c 	orr.w	r3, r3, #12
 8000656:	6013      	str	r3, [r2, #0]

	// enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;			// enable RXNE interrupt on USART2
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <USART_init+0xc0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <USART_init+0xc0>)
 800065e:	f043 0320 	orr.w	r3, r3, #32
 8000662:	6013      	str	r3, [r2, #0]

	USART2->ISR &= ~(USART_ISR_RXNE);			// clear interrupt flag while (message[i] != 0)
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <USART_init+0xc0>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <USART_init+0xc0>)
 800066a:	f023 0320 	bic.w	r3, r3, #32
 800066e:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <USART_init+0xc4>)
 8000672:	2240      	movs	r2, #64	; 0x40
 8000674:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000676:	b662      	cpsie	i
}
 8000678:	bf00      	nop

	__enable_irq();

	USART2->CR1 |= USART_CR1_UE;			// enable USART
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <USART_init+0xc0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <USART_init+0xc0>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6013      	str	r3, [r2, #0]


	// clear screen
	USART_Escape_Code("[2J");
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <USART_init+0xc8>)
 8000688:	f000 f838 	bl	80006fc <USART_Escape_Code>
	// top left cursor
	USART_Escape_Code("[H");
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <USART_init+0xcc>)
 800068e:	f000 f835 	bl	80006fc <USART_Escape_Code>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	40004400 	.word	0x40004400
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	080029ec 	.word	0x080029ec
 80006a8:	080029f0 	.word	0x080029f0

080006ac <USART_Print>:

// use a for loop to output one byte at a time to TDR
void USART_Print(const char* message)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e010      	b.n	80006dc <USART_Print+0x30>
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 80006ba:	bf00      	nop
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <USART_Print+0x4c>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <USART_Print+0x10>
		USART2->TDR = message[i];				// transmit character to USART
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <USART_Print+0x4c>)
 80006d2:	b292      	uxth	r2, r2
 80006d4:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	3301      	adds	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <USART_Print+0xe>
	}
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40004400 	.word	0x40004400

080006fc <USART_Escape_Code>:

// add /ESC to TDR before the actual escape code
void USART_Escape_Code(const char* msg)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 8000704:	bf00      	nop
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <USART_Escape_Code+0x2c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <USART_Escape_Code+0xa>
	USART2->TDR = 0x1B;
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <USART_Escape_Code+0x2c>)
 8000714:	221b      	movs	r2, #27
 8000716:	851a      	strh	r2, [r3, #40]	; 0x28
	USART_Print(msg);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffc7 	bl	80006ac <USART_Print>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40004400 	.word	0x40004400

0800072c <USART2_IRQHandler>:

// uses the corresponding color escape code or just prints out character
// enter adds \n after the \r it defaults to
void USART2_IRQHandler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	if (USART2->ISR & USART_ISR_RXNE)
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <USART2_IRQHandler+0x28>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <USART2_IRQHandler+0x1c>
//		// writes keyboard input to the serial display
//		while(!(USART2->ISR & USART_ISR_TXE));
//			USART2->TDR = USART2->RDR;

		// clears the flag
		USART2->ISR &= ~(USART_ISR_RXNE);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <USART2_IRQHandler+0x28>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <USART2_IRQHandler+0x28>)
 8000742:	f023 0320 	bic.w	r3, r3, #32
 8000746:	61d3      	str	r3, [r2, #28]
	}
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40004400 	.word	0x40004400

08000758 <loop_keypad_once>:
	return '\0';
}

// returns index of button pressed or -1 if nothing is pressed
int8_t loop_keypad_once()
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
	uint8_t col, row = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	71bb      	strb	r3, [r7, #6]

	// clear column ODR
	GPIOC->ODR &= ~(GPIO_ODR_OD4 | GPIO_ODR_OD5 | GPIO_ODR_OD6);
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <loop_keypad_once+0x88>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <loop_keypad_once+0x88>)
 8000768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800076c:	6153      	str	r3, [r2, #20]

	// drive each column once
	for(col = 0; col < NUM_COL; col++)
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e029      	b.n	80007c8 <loop_keypad_once+0x70>
	{
		// drive column
		GPIOC->BSRR = (1 << NUM_ROW) << col;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2210      	movs	r2, #16
 8000778:	409a      	lsls	r2, r3
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <loop_keypad_once+0x88>)
 800077c:	619a      	str	r2, [r3, #24]

		// check rows
		for(row = 0; row < NUM_ROW; row++)
 800077e:	2300      	movs	r3, #0
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	e015      	b.n	80007b0 <loop_keypad_once+0x58>
		{
			if(GPIOC->IDR & (1 << row))
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <loop_keypad_once+0x88>)
 8000786:	691b      	ldr	r3, [r3, #16]
 8000788:	79ba      	ldrb	r2, [r7, #6]
 800078a:	2101      	movs	r1, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	4013      	ands	r3, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	d009      	beq.n	80007aa <loop_keypad_once+0x52>
			{
				return NUM_COL * row + col;
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	461a      	mov	r2, r3
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	4413      	add	r3, r2
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4413      	add	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	e013      	b.n	80007d2 <loop_keypad_once+0x7a>
		for(row = 0; row < NUM_ROW; row++)
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	3301      	adds	r3, #1
 80007ae:	71bb      	strb	r3, [r7, #6]
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d9e6      	bls.n	8000784 <loop_keypad_once+0x2c>
			}
		}

		// disable column
		GPIOC->BSRR = ((1 << GPIO_BSRR_BR0_Pos) << NUM_ROW) << col;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007bc:	409a      	lsls	r2, r3
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <loop_keypad_once+0x88>)
 80007c0:	619a      	str	r2, [r3, #24]
	for(col = 0; col < NUM_COL; col++)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	3301      	adds	r3, #1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d9d2      	bls.n	8000774 <loop_keypad_once+0x1c>
	}

	return -1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	48000800 	.word	0x48000800

080007e4 <keypad_init>:

	return -1;
}

void keypad_init()
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	 * rows are on pins PC0(row 1) PC1(row 2) PC2(row 3) PC3(row 4)
	 * sets pull down resistors on row pins for better reads
	 * */

	// enable clock for port C
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <keypad_init+0x58>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a13      	ldr	r2, [pc, #76]	; (800083c <keypad_init+0x58>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c

	// drive columns on pins PC4(col 1) PC5(col 2) PC6(col 3)
	GPIOC->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6); // clear pins
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <keypad_init+0x5c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a11      	ldr	r2, [pc, #68]	; (8000840 <keypad_init+0x5c>)
 80007fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80007fe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= ( (1 << GPIO_MODER_MODE4_Pos) |
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <keypad_init+0x5c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <keypad_init+0x5c>)
 8000806:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 800080a:	6013      	str	r3, [r2, #0]
						(1 << GPIO_MODER_MODE5_Pos) |
						(1 << GPIO_MODER_MODE6_Pos) ); // set pins to output

	// read from rows on pins PC0(row 1) PC1(row 2) PC2(row 3) PC3(row 4)
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <keypad_init+0x5c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <keypad_init+0x5c>)
 8000812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000816:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // clear pins, sets them to input

	// set pull-down resistors for rows to prevent floating voltages (better for reading)
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 |
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <keypad_init+0x5c>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a08      	ldr	r2, [pc, #32]	; (8000840 <keypad_init+0x5c>)
 800081e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000822:	60d3      	str	r3, [r2, #12]
						GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3); // clear pins
	GPIOC->PUPDR |= ( (2 << GPIO_PUPDR_PUPD0_Pos) |
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <keypad_init+0x5c>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <keypad_init+0x5c>)
 800082a:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 800082e:	60d3      	str	r3, [r2, #12]
						(2 << GPIO_PUPDR_PUPD1_Pos) |
						(2 << GPIO_PUPDR_PUPD2_Pos) |
						(2 << GPIO_PUPDR_PUPD3_Pos) ); // pull pins low

}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800

08000844 <make_hi>:

}

// makes a relief hi
void make_hi(color c)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	fill_matrix(c);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 ff9d 	bl	800178c <fill_matrix>

	clear_pixel(1,1);
 8000852:	2101      	movs	r1, #1
 8000854:	2001      	movs	r0, #1
 8000856:	f000 ff3f 	bl	80016d8 <clear_pixel>
	clear_pixel(1,2);
 800085a:	2102      	movs	r1, #2
 800085c:	2001      	movs	r0, #1
 800085e:	f000 ff3b 	bl	80016d8 <clear_pixel>
	clear_pixel(1,3);
 8000862:	2103      	movs	r1, #3
 8000864:	2001      	movs	r0, #1
 8000866:	f000 ff37 	bl	80016d8 <clear_pixel>
	clear_pixel(1,4);
 800086a:	2104      	movs	r1, #4
 800086c:	2001      	movs	r0, #1
 800086e:	f000 ff33 	bl	80016d8 <clear_pixel>
	clear_pixel(1,5);
 8000872:	2105      	movs	r1, #5
 8000874:	2001      	movs	r0, #1
 8000876:	f000 ff2f 	bl	80016d8 <clear_pixel>

	clear_pixel(2,3);
 800087a:	2103      	movs	r1, #3
 800087c:	2002      	movs	r0, #2
 800087e:	f000 ff2b 	bl	80016d8 <clear_pixel>

	clear_pixel(3,1);
 8000882:	2101      	movs	r1, #1
 8000884:	2003      	movs	r0, #3
 8000886:	f000 ff27 	bl	80016d8 <clear_pixel>
	clear_pixel(3,2);
 800088a:	2102      	movs	r1, #2
 800088c:	2003      	movs	r0, #3
 800088e:	f000 ff23 	bl	80016d8 <clear_pixel>
	clear_pixel(3,3);
 8000892:	2103      	movs	r1, #3
 8000894:	2003      	movs	r0, #3
 8000896:	f000 ff1f 	bl	80016d8 <clear_pixel>
	clear_pixel(3,4);
 800089a:	2104      	movs	r1, #4
 800089c:	2003      	movs	r0, #3
 800089e:	f000 ff1b 	bl	80016d8 <clear_pixel>
	clear_pixel(3,5);
 80008a2:	2105      	movs	r1, #5
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 ff17 	bl	80016d8 <clear_pixel>

	clear_pixel(5,2);
 80008aa:	2102      	movs	r1, #2
 80008ac:	2005      	movs	r0, #5
 80008ae:	f000 ff13 	bl	80016d8 <clear_pixel>
	clear_pixel(5,4);
 80008b2:	2104      	movs	r1, #4
 80008b4:	2005      	movs	r0, #5
 80008b6:	f000 ff0f 	bl	80016d8 <clear_pixel>
	clear_pixel(5,5);
 80008ba:	2105      	movs	r1, #5
 80008bc:	2005      	movs	r0, #5
 80008be:	f000 ff0b 	bl	80016d8 <clear_pixel>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <make_smiley>:

// makes a 'relief' smiley face with the background color as the input
void make_smiley(color c)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	fill_matrix(c);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 ff5a 	bl	800178c <fill_matrix>

	clear_pixel(3,2);
 80008d8:	2102      	movs	r1, #2
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 fefc 	bl	80016d8 <clear_pixel>
	clear_pixel(5,2);
 80008e0:	2102      	movs	r1, #2
 80008e2:	2005      	movs	r0, #5
 80008e4:	f000 fef8 	bl	80016d8 <clear_pixel>
	clear_pixel(2,4);
 80008e8:	2104      	movs	r1, #4
 80008ea:	2002      	movs	r0, #2
 80008ec:	f000 fef4 	bl	80016d8 <clear_pixel>
	clear_pixel(3,5);
 80008f0:	2105      	movs	r1, #5
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 fef0 	bl	80016d8 <clear_pixel>
	clear_pixel(4,5);
 80008f8:	2105      	movs	r1, #5
 80008fa:	2004      	movs	r0, #4
 80008fc:	f000 feec 	bl	80016d8 <clear_pixel>
	clear_pixel(5,5);
 8000900:	2105      	movs	r1, #5
 8000902:	2005      	movs	r0, #5
 8000904:	f000 fee8 	bl	80016d8 <clear_pixel>
	clear_pixel(6,4);
 8000908:	2104      	movs	r1, #4
 800090a:	2006      	movs	r0, #6
 800090c:	f000 fee4 	bl	80016d8 <clear_pixel>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <set_matrix_section>:

// sets the row select bits of the matrix to the desired value
void set_matrix_section(uint8_t row)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
//	uint8_t a = row & 0x01; // LSB of row select
//	uint8_t b = row & 0x02; //
//	uint8_t c = row & 0x04; // MSB of row select

	// clears pins
	GPIOC->ODR &= ~((1 << 7) | (1 << 8) | (1 << 9));
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <set_matrix_section+0x64>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <set_matrix_section+0x64>)
 8000928:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800092c:	6153      	str	r3, [r2, #20]

	// sets pins to value
//	GPIOC->ODR |= (((!!c) << 9) | ((!!b) << 8) | ((!!a) << 7)); // works
//	GPIOC->ODR |= (((row & 0x04) << 9) | ((row & 0x02) << 8) | ((row & 0x01) << 7)); // doesn't work

	if(row & 0x01) GPIOC->ODR |= (1 << 7); // set LSB of ADDR bits
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <set_matrix_section+0x2c>
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <set_matrix_section+0x64>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <set_matrix_section+0x64>)
 800093e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000942:	6153      	str	r3, [r2, #20]
	if(row & 0x02) GPIOC->ODR |= (1 << 8);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d005      	beq.n	800095a <set_matrix_section+0x42>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <set_matrix_section+0x64>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <set_matrix_section+0x64>)
 8000954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000958:	6153      	str	r3, [r2, #20]
	if(row & 0x04) GPIOC->ODR |= (1 << 9); // set MSB of ADDR bits
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <set_matrix_section+0x58>
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <set_matrix_section+0x64>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <set_matrix_section+0x64>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096e:	6153      	str	r3, [r2, #20]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	48000800 	.word	0x48000800

08000980 <set_LAT>:

// sets the latch pin HIGH if val > 0 and LOW if val == 0
void set_LAT(uint8_t val)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	 * 		LAT
	 * 		PC11
	 */

	// sets the pin low
	GPIOC->ODR &= ~(1 << 11);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <set_LAT+0x34>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <set_LAT+0x34>)
 8000990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000994:	6153      	str	r3, [r2, #20]

	// sets the pin high if input is > 0
	if(val > 0)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d005      	beq.n	80009a8 <set_LAT+0x28>
		GPIOC->ODR |= (1 << 11);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <set_LAT+0x34>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <set_LAT+0x34>)
 80009a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a6:	6153      	str	r3, [r2, #20]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	48000800 	.word	0x48000800

080009b8 <set_OE>:

// sets the output enable pin HIGH if val > 0 and LOW if val == 0
void set_OE(uint8_t val)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	 * 		OE
	 * 		PC12
	 */

	// sets the pin low
	GPIOC->ODR &= ~(1 << 12);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <set_OE+0x34>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <set_OE+0x34>)
 80009c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009cc:	6153      	str	r3, [r2, #20]

	// sets the pin high if input is > 0
	if(val > 0)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d005      	beq.n	80009e0 <set_OE+0x28>
		GPIOC->ODR |= (1 << 12);
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <set_OE+0x34>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <set_OE+0x34>)
 80009da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009de:	6153      	str	r3, [r2, #20]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	48000800 	.word	0x48000800

080009f0 <drive_matrix_clk>:

// drives the matrix clock high then low, for a idle-low rising-edge clock
void drive_matrix_clk()
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	GPIOC->BSRR |= (1 << 10); // sets clock HIGH
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <drive_matrix_clk+0x28>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <drive_matrix_clk+0x28>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	6193      	str	r3, [r2, #24]
	GPIOC->BRR |= (1 << 10);  // sets clock LOW
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <drive_matrix_clk+0x28>)
 8000a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <drive_matrix_clk+0x28>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	48000800 	.word	0x48000800

08000a1c <set_RGB_val>:

// sets the RGB values according to the input colors
void set_RGB_val(color upper, color lower)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]

	// clear the previous values in the ODR
//	GPIOB->ODR &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));

	// sets the upper and lower rgb values at the same time
	GPIOB->ODR |= ((upper.r << 0) | (upper.g << 1) | (upper.b << 2)
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <set_RGB_val+0x44>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	793a      	ldrb	r2, [r7, #4]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	797a      	ldrb	r2, [r7, #5]
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	4311      	orrs	r1, r2
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	4311      	orrs	r1, r2
					| (lower.r << 3) | (lower.g << 4) | (lower.b << 5));
 8000a3a:	783a      	ldrb	r2, [r7, #0]
 8000a3c:	00d2      	lsls	r2, r2, #3
 8000a3e:	4311      	orrs	r1, r2
 8000a40:	787a      	ldrb	r2, [r7, #1]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	4311      	orrs	r1, r2
 8000a46:	78ba      	ldrb	r2, [r7, #2]
 8000a48:	0152      	lsls	r2, r2, #5
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	4611      	mov	r1, r2
	GPIOB->ODR |= ((upper.r << 0) | (upper.g << 1) | (upper.b << 2)
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <set_RGB_val+0x44>)
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6153      	str	r3, [r2, #20]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	48000400 	.word	0x48000400

08000a64 <clear_RGB_val>:

// clears the values in the RGB pins' ODR
void clear_RGB_val()
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	 * 		R1   G1   B1   R2   G2   B2
	 * 		PB0  PB1  PB2  PB3  PB4  PB5
	 */

	// clear the previous values in the ODR
	GPIOB->ODR &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <clear_RGB_val+0x1c>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <clear_RGB_val+0x1c>)
 8000a6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a72:	6153      	str	r3, [r2, #20]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	48000400 	.word	0x48000400

08000a84 <matrix_begin>:

// initializes the matrix values to not latch data and disable output
void matrix_begin()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	 * LAT pin to be low b/c not latching any data
	 * OE pin to be high to disable output
	 */

	// RGB pins
	GPIOB->ODR &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <matrix_begin+0x30>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <matrix_begin+0x30>)
 8000a8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a92:	6153      	str	r3, [r2, #20]

	// ADDR pins, CLK pin, LAT pin
	GPIOC->ODR &= ~((1 << 7) | (1 << 8) | (1 << 9) | (1 << 10) | (1 << 11));
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <matrix_begin+0x34>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <matrix_begin+0x34>)
 8000a9a:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 8000a9e:	6153      	str	r3, [r2, #20]

	// OE pin
	GPIOC->ODR |= (1 << 12);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <matrix_begin+0x34>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <matrix_begin+0x34>)
 8000aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aaa:	6153      	str	r3, [r2, #20]

	// addr pins
//	GPIOC->ODR |= ((0 << 9) | (0 << 8) | (1 << 7)); // sets address to 1

	// initializes the buffer to be all dark
	clear_matrix();
 8000aac:	f000 fea0 	bl	80017f0 <clear_matrix>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800

08000abc <matrix_init>:

// initializes the Adafruit 32x16 RGB LED matrix
void matrix_init()
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	 * 		OE
	 * 		PC12
	 */

	// enable clock for port B and C
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <matrix_init+0x78>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <matrix_init+0x78>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <matrix_init+0x78>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <matrix_init+0x78>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// set color pins as outputs
	GPIOB->MODER &= ~(GPIO_MODER_MODE0
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <matrix_init+0x7c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <matrix_init+0x7c>)
 8000ade:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ae2:	f023 030f 	bic.w	r3, r3, #15
 8000ae6:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE1
			| GPIO_MODER_MODE2
			| GPIO_MODER_MODE3
			| GPIO_MODER_MODE4
			| GPIO_MODER_MODE5);
	GPIOB->MODER |= (GPIO_MODER_MODE0_0
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <matrix_init+0x7c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <matrix_init+0x7c>)
 8000aee:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8000af2:	f043 0305 	orr.w	r3, r3, #5
 8000af6:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE3_0
			| GPIO_MODER_MODE4_0
			| GPIO_MODER_MODE5_0);

	// set row select pins as outputs
	GPIOC->MODER &= ~(GPIO_MODER_MODE7
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <matrix_init+0x80>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <matrix_init+0x80>)
 8000afe:	f423 237c 	bic.w	r3, r3, #1032192	; 0xfc000
 8000b02:	6013      	str	r3, [r2, #0]
				| GPIO_MODER_MODE8
				| GPIO_MODER_MODE9);
	GPIOC->MODER |= (GPIO_MODER_MODE7_0
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <matrix_init+0x80>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <matrix_init+0x80>)
 8000b0a:	f443 23a8 	orr.w	r3, r3, #344064	; 0x54000
 8000b0e:	6013      	str	r3, [r2, #0]
				| GPIO_MODER_MODE8_0
				| GPIO_MODER_MODE9_0);

	// set clock, latch, output enable pins as output
	GPIOC->MODER &= ~(GPIO_MODER_MODE10
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <matrix_init+0x80>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <matrix_init+0x80>)
 8000b16:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8000b1a:	6013      	str	r3, [r2, #0]
				| GPIO_MODER_MODE11
				| GPIO_MODER_MODE12);
	GPIOC->MODER |= (GPIO_MODER_MODE10_0
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <matrix_init+0x80>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <matrix_init+0x80>)
 8000b22:	f043 73a8 	orr.w	r3, r3, #22020096	; 0x1500000
 8000b26:	6013      	str	r3, [r2, #0]
				| GPIO_MODER_MODE11_0
				| GPIO_MODER_MODE12_0);
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	48000800 	.word	0x48000800

08000b40 <TIM2_init>:

void TIM2_init(uint32_t arr, uint32_t psc, uint32_t ccr1); // initializes TIM2 with the provided ARR PSC CCR1 values

// initializes TIM2 with the provided ARR PSC CCR1 values
void TIM2_init(uint32_t arr, uint32_t psc, uint32_t ccr1)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	// enable the clock for TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // TIM2 clock
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <TIM2_init+0x90>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <TIM2_init+0x90>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6593      	str	r3, [r2, #88]	; 0x58

	// configure timer count settings
	TIM2->CR1 &= ~TIM_CR1_CMS; // sets count to be one directional
 8000b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b62:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b66:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_DIR; // sets timer to count up
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	f023 0310 	bic.w	r3, r3, #16
 8000b76:	6013      	str	r3, [r2, #0]
	TIM2->PSC = psc; // divides timer clock by PSC + 1
 8000b78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = arr;//804 // timer counts to ARR + 1 // 399 for 50% (w/o CCR1) // 799 when w CCR1
 8000b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	62d3      	str	r3, [r2, #44]	; 0x2c
  __ASM volatile ("cpsie i" : : : "memory");
 8000b88:	b662      	cpsie	i
}
 8000b8a:	bf00      	nop
	//TIM2->CCR1 = ccr1;//594 // compares count to CCR1 // 599 for 25% duty b/c 599 ~= 0.75*799

	// enable interrupts
	__enable_irq(); // enables ARM interrupts
	NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F)); // enables NVIC TIM2 interrupt
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <TIM2_init+0x94>)
 8000b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b92:	601a      	str	r2, [r3, #0]
	TIM2->SR &= ~TIM_SR_UIF; // resets TIM2 update interrupt flag
 8000b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6113      	str	r3, [r2, #16]
	//TIM2->SR &= ~TIM_SR_CC1IF; // resets TIM2 CC1 interrupt flag
	TIM2->DIER |= TIM_DIER_UIE; // enable TIM2 update interrupt
 8000ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	60d3      	str	r3, [r2, #12]
	//TIM2->DIER |= TIM_DIER_CC1IE; // enable TIM2 CC1 interrupt

	// start timer
	TIM2->CR1 |= TIM_CR1_CEN; // enables the counter
 8000bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <main>:
//uint8_t enable_serial = 0; 		// if 1 then send updates over UART, essentially is debugging
volatile uint8_t 	timer_flag 			= 1;
		 uint8_t	button_flag		 	= 0;

int main()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bde:	f000 ff3f 	bl	8001a60 <HAL_Init>

	// initialize the joystick
	SystemClock_Config(); 	// sets system clock to 32MHz
 8000be2:	f7ff fcb4 	bl	800054e <SystemClock_Config>
	xcoord_adc_init();		// initializes the ADC for the joystick x data
 8000be6:	f7ff fbfb 	bl	80003e0 <xcoord_adc_init>
	ycoord_adc_init();		// initializes the ADC for the joystick y data
 8000bea:	f7ff fb47 	bl	800027c <ycoord_adc_init>
	joystick_button_init();	// initializes the button on the joystick
 8000bee:	f7ff fafd 	bl	80001ec <joystick_button_init>

	// initializes the keypad
	keypad_init();
 8000bf2:	f7ff fdf7 	bl	80007e4 <keypad_init>

	// initializes the matrix
	matrix_init();			// initializes the matrix pins
 8000bf6:	f7ff ff61 	bl	8000abc <matrix_init>
	matrix_begin();			// sets the initial matrix pin values
 8000bfa:	f7ff ff43 	bl	8000a84 <matrix_begin>

	// sets the initial display
	make_smiley(CYAN); // make_hi(PURPLE);
 8000bfe:	4bc7      	ldr	r3, [pc, #796]	; (8000f1c <main+0x344>)
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	f7ff fe62 	bl	80008ca <make_smiley>

	// initializes the USART serial output
	USART_init();
 8000c06:	f7ff fce9 	bl	80005dc <USART_init>

	// sets the initial serial output
	USART_Print("doodlestick\n\r");
 8000c0a:	48c5      	ldr	r0, [pc, #788]	; (8000f20 <main+0x348>)
 8000c0c:	f7ff fd4e 	bl	80006ac <USART_Print>
	USART_Print("	by Jack and Srini\n\n\r");
 8000c10:	48c4      	ldr	r0, [pc, #784]	; (8000f24 <main+0x34c>)
 8000c12:	f7ff fd4b 	bl	80006ac <USART_Print>

	// initialize the speed timer
	TIM2_init(320000, 9, 0xFFFFFFFF); // initializes timer with values (arr, psc, ccr1)
 8000c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c1a:	2109      	movs	r1, #9
 8000c1c:	48c2      	ldr	r0, [pc, #776]	; (8000f28 <main+0x350>)
 8000c1e:	f7ff ff8f 	bl	8000b40 <TIM2_init>

	// variables
	KP_MODE kp_mode = DRAW;
 8000c22:	230b      	movs	r3, #11
 8000c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t kp_select = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t kp_ret = -1;
 8000c2e:	23ff      	movs	r3, #255	; 0xff
 8000c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t button_ret = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	color colors[8] = { RED,   	GREEN, 	BLUE,
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	753b      	strb	r3, [r7, #20]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	757b      	strb	r3, [r7, #21]
 8000c42:	2300      	movs	r3, #0
 8000c44:	75bb      	strb	r3, [r7, #22]
 8000c46:	2300      	movs	r3, #0
 8000c48:	75fb      	strb	r3, [r7, #23]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	763b      	strb	r3, [r7, #24]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	767b      	strb	r3, [r7, #25]
 8000c52:	2300      	movs	r3, #0
 8000c54:	76bb      	strb	r3, [r7, #26]
 8000c56:	2300      	movs	r3, #0
 8000c58:	76fb      	strb	r3, [r7, #27]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	773b      	strb	r3, [r7, #28]
 8000c5e:	4ab3      	ldr	r2, [pc, #716]	; (8000f2c <main+0x354>)
 8000c60:	f107 031d 	add.w	r3, r7, #29
 8000c64:	8811      	ldrh	r1, [r2, #0]
 8000c66:	7892      	ldrb	r2, [r2, #2]
 8000c68:	8019      	strh	r1, [r3, #0]
 8000c6a:	709a      	strb	r2, [r3, #2]
 8000c6c:	4aab      	ldr	r2, [pc, #684]	; (8000f1c <main+0x344>)
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	4611      	mov	r1, r2
 8000c76:	8019      	strh	r1, [r3, #0]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	0c12      	lsrs	r2, r2, #16
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	4aac      	ldr	r2, [pc, #688]	; (8000f30 <main+0x358>)
 8000c80:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000c84:	8811      	ldrh	r1, [r2, #0]
 8000c86:	7892      	ldrb	r2, [r2, #2]
 8000c88:	8019      	strh	r1, [r3, #0]
 8000c8a:	709a      	strb	r2, [r3, #2]
 8000c8c:	4aa9      	ldr	r2, [pc, #676]	; (8000f34 <main+0x35c>)
 8000c8e:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000c92:	8811      	ldrh	r1, [r2, #0]
 8000c94:	7892      	ldrb	r2, [r2, #2]
 8000c96:	8019      	strh	r1, [r3, #0]
 8000c98:	709a      	strb	r2, [r3, #2]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						YELLOW, CYAN, 	PURPLE,
						WHITE, 	BLACK 	};

	// shape variables
	point line[2] 		= { {.x = -1, .y = -1}, {.x = -1, .y = -1} };
 8000cac:	4ba2      	ldr	r3, [pc, #648]	; (8000f38 <main+0x360>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	613b      	str	r3, [r7, #16]
	point square[2] 	= { {.x = -1, .y = -1}, {.x = -1, .y = -1} };
 8000cb2:	4ba1      	ldr	r3, [pc, #644]	; (8000f38 <main+0x360>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
	point triangle[3]	= { {.x = -1, .y = -1}, {.x = -1, .y = -1} , {.x = -1, .y = -1} };
 8000cb8:	4aa0      	ldr	r2, [pc, #640]	; (8000f3c <main+0x364>)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc0:	6018      	str	r0, [r3, #0]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	8019      	strh	r1, [r3, #0]

	while(1)
	{
		// update joystick values, this could be more efficient if does this via a timer
		// update x coordinate joystick value
		if(xcoord_adc_flag)
 8000cc6:	4b9e      	ldr	r3, [pc, #632]	; (8000f40 <main+0x368>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d004      	beq.n	8000cda <main+0x102>
		{
			// reset flag
			xcoord_adc_flag = 0;
 8000cd0:	4b9b      	ldr	r3, [pc, #620]	; (8000f40 <main+0x368>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]

			// start another conversion
			xcoord_start_conversion();
 8000cd6:	f7ff fac1 	bl	800025c <xcoord_start_conversion>
		}
		// update y coordinate joystick value
		if(ycoord_adc_flag)
 8000cda:	4b9a      	ldr	r3, [pc, #616]	; (8000f44 <main+0x36c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d004      	beq.n	8000cee <main+0x116>
		{
			// reset flag
			ycoord_adc_flag = 0;
 8000ce4:	4b97      	ldr	r3, [pc, #604]	; (8000f44 <main+0x36c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]

			// start another conversion
			ycoord_start_conversion();
 8000cea:	f7ff faa7 	bl	800023c <ycoord_start_conversion>
		}

		// poll keypad, store as value
		kp_ret = loop_keypad_once(); // gets index of keypad
 8000cee:	f7ff fd33 	bl	8000758 <loop_keypad_once>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if(kp_ret >= 0) // valid command
 8000cf8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db57      	blt.n	8000db0 <main+0x1d8>
		{
			// get the value on the button instead of the index
			kp_ret = keypad_vals[kp_ret];
 8000d00:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d04:	4a90      	ldr	r2, [pc, #576]	; (8000f48 <main+0x370>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

			// check if keypad press was a MODE configuration
			if(kp_ret > 8 || kp_ret == 0)
 8000d0c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	dc03      	bgt.n	8000d1c <main+0x144>
 8000d14:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d145      	bne.n	8000da8 <main+0x1d0>
			{
				switch(kp_ret)
 8000d1c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d20:	2b0b      	cmp	r3, #11
 8000d22:	d83f      	bhi.n	8000da4 <main+0x1cc>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <main+0x154>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d6b 	.word	0x08000d6b
 8000d30:	08000da5 	.word	0x08000da5
 8000d34:	08000da5 	.word	0x08000da5
 8000d38:	08000da5 	.word	0x08000da5
 8000d3c:	08000da5 	.word	0x08000da5
 8000d40:	08000da5 	.word	0x08000da5
 8000d44:	08000da5 	.word	0x08000da5
 8000d48:	08000da5 	.word	0x08000da5
 8000d4c:	08000da5 	.word	0x08000da5
 8000d50:	08000d97 	.word	0x08000d97
 8000d54:	08000d5d 	.word	0x08000d5d
 8000d58:	08000d79 	.word	0x08000d79
				{
				case 0xA: 	// * = COLOR SELECT MODE
					kp_mode = COLOR;
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					kp_select = -1; // default is no selection
 8000d62:	23ff      	movs	r3, #255	; 0xff
 8000d64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;
 8000d68:	e01d      	b.n	8000da6 <main+0x1ce>
				case 0x0: 	// 0 = FILL SELECT MODE
					kp_mode = FILL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					kp_select = -1; // default is no selection
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;
 8000d76:	e016      	b.n	8000da6 <main+0x1ce>
				case 0xB: 	// # = DRAW SELECT MODE
					kp_mode = DRAW;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					reset_shapes(line, square, triangle);
 8000d7e:	1d3a      	adds	r2, r7, #4
 8000d80:	f107 010c 	add.w	r1, r7, #12
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fc00 	bl	800158e <reset_shapes>
					kp_select = -1; // default is no selection
 8000d8e:	23ff      	movs	r3, #255	; 0xff
 8000d90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;
 8000d94:	e007      	b.n	8000da6 <main+0x1ce>
				case 0x9: 	// 9 = SPEED SELECT MODE
					kp_mode = SPEED;
 8000d96:	2309      	movs	r3, #9
 8000d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					kp_select = -1; // default is no selection
 8000d9c:	23ff      	movs	r3, #255	; 0xff
 8000d9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;
 8000da2:	e000      	b.n	8000da6 <main+0x1ce>
				default: 	// else error, don't change anything
					break;
 8000da4:	bf00      	nop
				switch(kp_ret)
 8000da6:	e003      	b.n	8000db0 <main+0x1d8>
				}
			}
			else // keypad press changes the kp_select option
			{
				kp_select = kp_ret;
 8000da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000dac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
		}

		// execute command chosen
		switch(kp_mode)
 8000db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db4:	2b0b      	cmp	r3, #11
 8000db6:	f200 810a 	bhi.w	8000fce <main+0x3f6>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <main+0x1e8>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000e27 	.word	0x08000e27
 8000dc4:	08000fcf 	.word	0x08000fcf
 8000dc8:	08000fcf 	.word	0x08000fcf
 8000dcc:	08000fcf 	.word	0x08000fcf
 8000dd0:	08000fcf 	.word	0x08000fcf
 8000dd4:	08000fcf 	.word	0x08000fcf
 8000dd8:	08000fcf 	.word	0x08000fcf
 8000ddc:	08000fcf 	.word	0x08000fcf
 8000de0:	08000fcf 	.word	0x08000fcf
 8000de4:	08000fc1 	.word	0x08000fc1
 8000de8:	08000df1 	.word	0x08000df1
 8000dec:	08000e6b 	.word	0x08000e6b
		{
		case COLOR:		// COLOR mode 	= changes color of draw tool
			if(kp_select >= 0 && kp_select < 9)
 8000df0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f2c0 80ec 	blt.w	8000fd2 <main+0x3fa>
 8000dfa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	f300 80e7 	bgt.w	8000fd2 <main+0x3fa>
			{
				draw_color = colors[kp_select - 1];
 8000e04:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e08:	1e5a      	subs	r2, r3, #1
 8000e0a:	4950      	ldr	r1, [pc, #320]	; (8000f4c <main+0x374>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	3330      	adds	r3, #48	; 0x30
 8000e14:	443b      	add	r3, r7
 8000e16:	f1a3 021c 	sub.w	r2, r3, #28
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	8811      	ldrh	r1, [r2, #0]
 8000e1e:	7892      	ldrb	r2, [r2, #2]
 8000e20:	8019      	strh	r1, [r3, #0]
 8000e22:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000e24:	e0d5      	b.n	8000fd2 <main+0x3fa>

		case FILL:		// FILL mode  	= allows a decision on what color to fill the board with
			if(kp_select >= 0 && kp_select < 9)
 8000e26:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db19      	blt.n	8000e62 <main+0x28a>
 8000e2e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	dc15      	bgt.n	8000e62 <main+0x28a>
			{
				fill_matrix(colors[kp_select - 1]);
 8000e36:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	3330      	adds	r3, #48	; 0x30
 8000e44:	443b      	add	r3, r7
 8000e46:	3b1c      	subs	r3, #28
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	7859      	ldrb	r1, [r3, #1]
 8000e4c:	0209      	lsls	r1, r1, #8
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	431a      	orrs	r2, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	f362 0317 	bfi	r3, r2, #0, #24
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fc95 	bl	800178c <fill_matrix>
			}
			kp_select = -1;
 8000e62:	23ff      	movs	r3, #255	; 0xff
 8000e64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8000e68:	e0b4      	b.n	8000fd4 <main+0x3fc>

		case DRAW:		// DRAW mode  	= changes type of draw tool
			switch(kp_select)
 8000e6a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	2b07      	cmp	r3, #7
 8000e72:	f200 809d 	bhi.w	8000fb0 <main+0x3d8>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <main+0x2a4>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e9d 	.word	0x08000e9d
 8000e80:	08000ea5 	.word	0x08000ea5
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	08000ecf 	.word	0x08000ecf
 8000e8c:	08000ef1 	.word	0x08000ef1
 8000e90:	08000f13 	.word	0x08000f13
 8000e94:	08000f59 	.word	0x08000f59
 8000e98:	08000f83 	.word	0x08000f83
			{
			case 1:	// free 	= don't change matrix
				drawing = 0;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <main+0x378>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
				break;
 8000ea2:	e08c      	b.n	8000fbe <main+0x3e6>
			case 2: // trace 	= draw where moving
				drawing = 1;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <main+0x378>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
				break;
 8000eaa:	e088      	b.n	8000fbe <main+0x3e6>
			case 3: // line		= can click twice and draw a line between the two spots clicked
				drawing = 0;
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <main+0x378>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
				if(button_flag)
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <main+0x37c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d07c      	beq.n	8000fb4 <main+0x3dc>
				{
					add_pt_to_shape(line, 2);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f9fd 	bl	80012c0 <add_pt_to_shape>
					// reset button flag
					button_flag = 0;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <main+0x37c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000ecc:	e072      	b.n	8000fb4 <main+0x3dc>
			case 4: // square	= can click twice and draw a square with two spots clicked as opposite corners
				drawing = 0;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <main+0x378>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
				if(button_flag)
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <main+0x37c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d06d      	beq.n	8000fb8 <main+0x3e0>
				{
					add_pt_to_shape(line, 4);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f9ec 	bl	80012c0 <add_pt_to_shape>
					// reset button flag
					button_flag = 0;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <main+0x37c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000eee:	e063      	b.n	8000fb8 <main+0x3e0>
			case 5: // triangle = can click three times and draw triangle with 3 spots clicked as vertices
				drawing = 0;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <main+0x378>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
				if(button_flag)
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <main+0x37c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d05e      	beq.n	8000fbc <main+0x3e4>
				{
					add_pt_to_shape(line, 3);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2103      	movs	r1, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f9db 	bl	80012c0 <add_pt_to_shape>
					// reset button flag
					button_flag = 0;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <main+0x37c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f10:	e054      	b.n	8000fbc <main+0x3e4>
			case 6: // thick 	= cursor now 1 dot // now is going to be the cyan w smiley relief
				make_smiley(CYAN); // turn into logo
 8000f12:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <main+0x344>)
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	f7ff fcd8 	bl	80008ca <make_smiley>
				break;
 8000f1a:	e050      	b.n	8000fbe <main+0x3e6>
 8000f1c:	08002a48 	.word	0x08002a48
 8000f20:	080029f4 	.word	0x080029f4
 8000f24:	08002a04 	.word	0x08002a04
 8000f28:	0004e200 	.word	0x0004e200
 8000f2c:	08002a44 	.word	0x08002a44
 8000f30:	08002a40 	.word	0x08002a40
 8000f34:	08002a38 	.word	0x08002a38
 8000f38:	08002a1c 	.word	0x08002a1c
 8000f3c:	08002a20 	.word	0x08002a20
 8000f40:	2000000c 	.word	0x2000000c
 8000f44:	2000000d 	.word	0x2000000d
 8000f48:	08002a2c 	.word	0x08002a2c
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	2000063e 	.word	0x2000063e
 8000f54:	2000063f 	.word	0x2000063f
			case 7: // thiick	= cursor now 2 dots radius thickness // now is purple hi or cyan smiley
				if(xcoord_data % 2) make_hi(PURPLE);
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <main+0x418>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <main+0x39a>
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <main+0x41c>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f7ff fc6a 	bl	8000844 <make_hi>
 8000f70:	e003      	b.n	8000f7a <main+0x3a2>
				else make_smiley(CYAN);
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <main+0x420>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f7ff fca8 	bl	80008ca <make_smiley>
				kp_select = -1;
 8000f7a:	23ff      	movs	r3, #255	; 0xff
 8000f7c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				break;
 8000f80:	e01d      	b.n	8000fbe <main+0x3e6>
			case 8: // thiiick	= cursor now 3 dots radius thickness // now is going to be a continous fill of blank
				fill_matrix(colors[kp_select - 1]);
 8000f82:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3330      	adds	r3, #48	; 0x30
 8000f90:	443b      	add	r3, r7
 8000f92:	3b1c      	subs	r3, #28
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	7859      	ldrb	r1, [r3, #1]
 8000f98:	0209      	lsls	r1, r1, #8
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f362 0317 	bfi	r3, r2, #0, #24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fbef 	bl	800178c <fill_matrix>
				break;
 8000fae:	e006      	b.n	8000fbe <main+0x3e6>
			default:	// error in option selected, do nothing
				break;
 8000fb0:	bf00      	nop
 8000fb2:	e00f      	b.n	8000fd4 <main+0x3fc>
				break;
 8000fb4:	bf00      	nop
 8000fb6:	e00d      	b.n	8000fd4 <main+0x3fc>
				break;
 8000fb8:	bf00      	nop
 8000fba:	e00b      	b.n	8000fd4 <main+0x3fc>
				break;
 8000fbc:	bf00      	nop
			}
			break;
 8000fbe:	e009      	b.n	8000fd4 <main+0x3fc>

		case SPEED:		// SPEED mode 	= changes speed of cursor movement
			TIM2->PSC = kp_select + 1; // larger number = slower speed
 8000fc0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000fcc:	e002      	b.n	8000fd4 <main+0x3fc>

		default:		// invalid mode, do nothing
			break;
 8000fce:	bf00      	nop
 8000fd0:	e000      	b.n	8000fd4 <main+0x3fc>
			break;
 8000fd2:	bf00      	nop
		}

		// move cursor
		if(timer_flag)
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <main+0x424>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <main+0x410>
		{
			move_cursor();
 8000fde:	f000 f85b 	bl	8001098 <move_cursor>
			timer_flag = 0;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <main+0x424>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
//			USART_print_int(kp_select);
//			USART_Print("\n\r");
		}

		// update the display
		update_display();
 8000fe8:	f000 fc48 	bl	800187c <update_display>
		if(xcoord_adc_flag)
 8000fec:	e66b      	b.n	8000cc6 <main+0xee>
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	08002a40 	.word	0x08002a40
 8000ff8:	08002a48 	.word	0x08002a48
 8000ffc:	2000000e 	.word	0x2000000e

08001000 <TIM2_IRQHandler>:

/* ------------------- INTERRUPT FUNCTIONS ------------------- */

// interrupt handler for TIM2
void TIM2_IRQHandler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	// if from TIM2 update event
	if(TIM2->SR & TIM_SR_UIF) // from ARR
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00a      	beq.n	8001028 <TIM2_IRQHandler+0x28>
	{
		TIM2->SR &= ~TIM_SR_UIF; 	// reset interrupt flag
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6113      	str	r3, [r2, #16]
		timer_flag = 1;				// set global timer flag
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <TIM2_IRQHandler+0x34>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
	}
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000000e 	.word	0x2000000e

08001038 <ADC1_2_IRQHandler>:

// clear flag and set globals
void ADC1_2_IRQHandler()
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	// Vref for X is the input to ADC1
	if (ADC1->ISR & ADC_ISR_EOC)
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <ADC1_2_IRQHandler+0x48>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d007      	beq.n	8001058 <ADC1_2_IRQHandler+0x20>
	{
		xcoord_data = ADC1->DR;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <ADC1_2_IRQHandler+0x48>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <ADC1_2_IRQHandler+0x4c>)
 8001050:	801a      	strh	r2, [r3, #0]
		xcoord_adc_flag = 1;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <ADC1_2_IRQHandler+0x50>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
	}

	// Vref for Y is the input to ADC2
	if(ADC2->ISR & ADC_ISR_EOC)
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <ADC1_2_IRQHandler+0x54>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <ADC1_2_IRQHandler+0x3c>
	{
		ycoord_data = ADC2->DR;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <ADC1_2_IRQHandler+0x54>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <ADC1_2_IRQHandler+0x58>)
 800106c:	801a      	strh	r2, [r3, #0]
		ycoord_adc_flag = 1;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <ADC1_2_IRQHandler+0x5c>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
	}
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	50040000 	.word	0x50040000
 8001084:	20000008 	.word	0x20000008
 8001088:	2000000c 	.word	0x2000000c
 800108c:	50040100 	.word	0x50040100
 8001090:	2000000a 	.word	0x2000000a
 8001094:	2000000d 	.word	0x2000000d

08001098 <move_cursor>:

/* ------------------ JOYSTICK FUNCTIONS ------------------ */

// moves the cursor in the direction indicated by the joystick
void move_cursor()
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	// update the previous cursor position
	prev_pos = cursor_pos;
 800109e:	4a7b      	ldr	r2, [pc, #492]	; (800128c <move_cursor+0x1f4>)
 80010a0:	4b7b      	ldr	r3, [pc, #492]	; (8001290 <move_cursor+0x1f8>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	8013      	strh	r3, [r2, #0]

	// check x+ (right) direction
	if(xcoord_data > X_NEUTRAL + THRESHOLD) // joystick wants to move right
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <move_cursor+0x1fc>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f640 3286 	movw	r2, #2950	; 0xb86
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d90d      	bls.n	80010d0 <move_cursor+0x38>
	{
		if(cursor_pos.x < NUM_COLS - 1) 	// room to move right
 80010b4:	4b76      	ldr	r3, [pc, #472]	; (8001290 <move_cursor+0x1f8>)
 80010b6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ba:	2b1e      	cmp	r3, #30
 80010bc:	dc08      	bgt.n	80010d0 <move_cursor+0x38>
		{
			cursor_pos.x++;
 80010be:	4b74      	ldr	r3, [pc, #464]	; (8001290 <move_cursor+0x1f8>)
 80010c0:	f993 3000 	ldrsb.w	r3, [r3]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	b25a      	sxtb	r2, r3
 80010cc:	4b70      	ldr	r3, [pc, #448]	; (8001290 <move_cursor+0x1f8>)
 80010ce:	701a      	strb	r2, [r3, #0]
		}
	}

	// check x- (left) direction
	if(xcoord_data < X_NEUTRAL - THRESHOLD) // joystick wants to move left
 80010d0:	4b70      	ldr	r3, [pc, #448]	; (8001294 <move_cursor+0x1fc>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	f240 427d 	movw	r2, #1149	; 0x47d
 80010da:	4293      	cmp	r3, r2
 80010dc:	d80d      	bhi.n	80010fa <move_cursor+0x62>
	{
		if(cursor_pos.x > 0) 				// room to move left
 80010de:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <move_cursor+0x1f8>)
 80010e0:	f993 3000 	ldrsb.w	r3, [r3]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd08      	ble.n	80010fa <move_cursor+0x62>
		{
			cursor_pos.x--;
 80010e8:	4b69      	ldr	r3, [pc, #420]	; (8001290 <move_cursor+0x1f8>)
 80010ea:	f993 3000 	ldrsb.w	r3, [r3]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	3b01      	subs	r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	b25a      	sxtb	r2, r3
 80010f6:	4b66      	ldr	r3, [pc, #408]	; (8001290 <move_cursor+0x1f8>)
 80010f8:	701a      	strb	r2, [r3, #0]
		}
	}

	// check y+ (down) direction
	if(ycoord_data > Y_NEUTRAL + THRESHOLD) // joystick wants to move down
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <move_cursor+0x200>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	f640 3222 	movw	r2, #2850	; 0xb22
 8001104:	4293      	cmp	r3, r2
 8001106:	d90d      	bls.n	8001124 <move_cursor+0x8c>
	{
		if(cursor_pos.y < NUM_ROWS - 1) 	// room to move down
 8001108:	4b61      	ldr	r3, [pc, #388]	; (8001290 <move_cursor+0x1f8>)
 800110a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800110e:	2b0e      	cmp	r3, #14
 8001110:	dc08      	bgt.n	8001124 <move_cursor+0x8c>
		{
			cursor_pos.y++;
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <move_cursor+0x1f8>)
 8001114:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	3301      	adds	r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b25a      	sxtb	r2, r3
 8001120:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <move_cursor+0x1f8>)
 8001122:	705a      	strb	r2, [r3, #1]
		}
	}

	// check y- (up) direction
	if(ycoord_data < Y_NEUTRAL - THRESHOLD) // joystick wants to move up
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <move_cursor+0x200>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	f240 4219 	movw	r2, #1049	; 0x419
 800112e:	4293      	cmp	r3, r2
 8001130:	d80d      	bhi.n	800114e <move_cursor+0xb6>
	{
		if(cursor_pos.y > 0)
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <move_cursor+0x1f8>)
 8001134:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd08      	ble.n	800114e <move_cursor+0xb6>
		{
			cursor_pos.y--;
 800113c:	4b54      	ldr	r3, [pc, #336]	; (8001290 <move_cursor+0x1f8>)
 800113e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	b25a      	sxtb	r2, r3
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <move_cursor+0x1f8>)
 800114c:	705a      	strb	r2, [r3, #1]
		}
	}

	// create color at the location if drawing
	if(drawing)
 800114e:	4b53      	ldr	r3, [pc, #332]	; (800129c <move_cursor+0x204>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <move_cursor+0xd8>
	{
		draw_pixel(cursor_pos.x, cursor_pos.y, draw_color);
 8001156:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <move_cursor+0x1f8>)
 8001158:	f993 3000 	ldrsb.w	r3, [r3]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <move_cursor+0x1f8>)
 8001160:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001164:	b2d1      	uxtb	r1, r2
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <move_cursor+0x208>)
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 faec 	bl	8001748 <draw_pixel>
	}
	static uint8_t state = 0;
	// check if the cursor is in the previous position
	if(cursor_pos.x == prev_pos.x && cursor_pos.y == prev_pos.y) // cursor is at the previous position, blink cursor
 8001170:	4b47      	ldr	r3, [pc, #284]	; (8001290 <move_cursor+0x1f8>)
 8001172:	f993 2000 	ldrsb.w	r2, [r3]
 8001176:	4b45      	ldr	r3, [pc, #276]	; (800128c <move_cursor+0x1f4>)
 8001178:	f993 3000 	ldrsb.w	r3, [r3]
 800117c:	429a      	cmp	r2, r3
 800117e:	d159      	bne.n	8001234 <move_cursor+0x19c>
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <move_cursor+0x1f8>)
 8001182:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001186:	4b41      	ldr	r3, [pc, #260]	; (800128c <move_cursor+0x1f4>)
 8001188:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800118c:	429a      	cmp	r2, r3
 800118e:	d151      	bne.n	8001234 <move_cursor+0x19c>
	{
		static uint8_t blink_count = 0;
		if(blink_count == BLINK_THRESHOLD)
 8001190:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <move_cursor+0x20c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b05      	cmp	r3, #5
 8001196:	d146      	bne.n	8001226 <move_cursor+0x18e>
		{
			if(state) //check_color(cursor_pos, WHITE)) // matrix color at cursor is WHITE
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <move_cursor+0x210>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d010      	beq.n	80011c2 <move_cursor+0x12a>
			{
				draw_pixel(cursor_pos.x, cursor_pos.y, prev_color); // BLACK ? // prev_color
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <move_cursor+0x1f8>)
 80011a2:	f993 3000 	ldrsb.w	r3, [r3]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4a39      	ldr	r2, [pc, #228]	; (8001290 <move_cursor+0x1f8>)
 80011aa:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	4a3e      	ldr	r2, [pc, #248]	; (80012ac <move_cursor+0x214>)
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fac7 	bl	8001748 <draw_pixel>
				state = 0;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <move_cursor+0x210>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e027      	b.n	8001212 <move_cursor+0x17a>
			}
			else
			{
				draw_pixel(cursor_pos.x, cursor_pos.y, check_color(cursor_pos, BLACK) ? WHITE : BLACK); // WHITE
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <move_cursor+0x1f8>)
 80011c4:	f993 3000 	ldrsb.w	r3, [r3]
 80011c8:	b2dc      	uxtb	r4, r3
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <move_cursor+0x1f8>)
 80011cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011d0:	b2dd      	uxtb	r5, r3
 80011d2:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <move_cursor+0x218>)
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <move_cursor+0x1f8>)
 80011d6:	6811      	ldr	r1, [r2, #0]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	f000 fa39 	bl	8001650 <check_color>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <move_cursor+0x15e>
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <move_cursor+0x21c>)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
 80011ec:	8019      	strh	r1, [r3, #0]
 80011ee:	3302      	adds	r3, #2
 80011f0:	0c12      	lsrs	r2, r2, #16
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e005      	b.n	8001202 <move_cursor+0x16a>
 80011f6:	2300      	movs	r3, #0
 80011f8:	713b      	strb	r3, [r7, #4]
 80011fa:	2300      	movs	r3, #0
 80011fc:	717b      	strb	r3, [r7, #5]
 80011fe:	2300      	movs	r3, #0
 8001200:	71bb      	strb	r3, [r7, #6]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4629      	mov	r1, r5
 8001206:	4620      	mov	r0, r4
 8001208:	f000 fa9e 	bl	8001748 <draw_pixel>
				state = 1;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <move_cursor+0x210>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
			}
			// reset blink count
			blink_count = 0;
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <move_cursor+0x20c>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
			// check the button status
			button_flag = get_joystick_button();
 8001218:	f7fe ffd6 	bl	80001c8 <get_joystick_button>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <move_cursor+0x220>)
 8001222:	701a      	strb	r2, [r3, #0]
	{
 8001224:	e02e      	b.n	8001284 <move_cursor+0x1ec>
		}
		else
		{
			// increment blink count
			blink_count++;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <move_cursor+0x20c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <move_cursor+0x20c>)
 8001230:	701a      	strb	r2, [r3, #0]
	{
 8001232:	e027      	b.n	8001284 <move_cursor+0x1ec>
		}
	}
	else // need to replace the color at the previous position, and update prev_color for next time
	{
		draw_pixel(prev_pos.x, prev_pos.y, prev_color);
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <move_cursor+0x1f4>)
 8001236:	f993 3000 	ldrsb.w	r3, [r3]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <move_cursor+0x1f4>)
 800123e:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001242:	b2d1      	uxtb	r1, r2
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <move_cursor+0x214>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fa7d 	bl	8001748 <draw_pixel>
		prev_color = matrix_buffer[cursor_pos.x][cursor_pos.y];
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <move_cursor+0x1f8>)
 8001250:	f993 3000 	ldrsb.w	r3, [r3]
 8001254:	4618      	mov	r0, r3
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <move_cursor+0x1f8>)
 8001258:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800125c:	4c13      	ldr	r4, [pc, #76]	; (80012ac <move_cursor+0x214>)
 800125e:	4917      	ldr	r1, [pc, #92]	; (80012bc <move_cursor+0x224>)
 8001260:	461a      	mov	r2, r3
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	441a      	add	r2, r3
 8001266:	4603      	mov	r3, r0
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4403      	add	r3, r0
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	18ca      	adds	r2, r1, r3
 8001272:	4623      	mov	r3, r4
 8001274:	8811      	ldrh	r1, [r2, #0]
 8001276:	7892      	ldrb	r2, [r2, #2]
 8001278:	8019      	strh	r1, [r3, #0]
 800127a:	709a      	strb	r2, [r3, #2]
		state = 0;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <move_cursor+0x210>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bdb0      	pop	{r4, r5, r7, pc}
 800128c:	2000063c 	.word	0x2000063c
 8001290:	20000638 	.word	0x20000638
 8001294:	20000008 	.word	0x20000008
 8001298:	2000000a 	.word	0x2000000a
 800129c:	2000063e 	.word	0x2000063e
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000640 	.word	0x20000640
 80012a8:	20000641 	.word	0x20000641
 80012ac:	20000000 	.word	0x20000000
 80012b0:	08002a3c 	.word	0x08002a3c
 80012b4:	08002a38 	.word	0x08002a38
 80012b8:	2000063f 	.word	0x2000063f
 80012bc:	20000038 	.word	0x20000038

080012c0 <add_pt_to_shape>:

/* ------------------- MATRIX FUNCTIONS ------------------- */

// adds the current cursor position to the shape
void add_pt_to_shape(point* shape, uint8_t size)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
	// variables
	uint8_t size_to_use = size == 4 ? 2 : size;
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d001      	beq.n	80012d6 <add_pt_to_shape+0x16>
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	e000      	b.n	80012d8 <add_pt_to_shape+0x18>
 80012d6:	2302      	movs	r3, #2
 80012d8:	73bb      	strb	r3, [r7, #14]
//	uint8_t reset_shape = 1;
	int8_t pt_index = get_shape_index(shape, size_to_use);
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f92a 	bl	8001538 <get_shape_index>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]

	// resets shape if need be
	if(pt_index < 0)
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da06      	bge.n	80012fe <add_pt_to_shape+0x3e>
	{
		reset_this_shape(shape, size_to_use);
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f988 	bl	800160a <reset_this_shape>
		pt_index = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
	}

	// adds current cursor point to shape
	shape[pt_index].x = cursor_pos.x;
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <add_pt_to_shape+0x94>)
 800130a:	f992 2000 	ldrsb.w	r2, [r2]
 800130e:	701a      	strb	r2, [r3, #0]
	shape[pt_index].y = cursor_pos.y;
 8001310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <add_pt_to_shape+0x94>)
 800131c:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001320:	705a      	strb	r2, [r3, #1]

	// check if shape is full now
	pt_index = get_shape_index(shape, size_to_use);
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f906 	bl	8001538 <get_shape_index>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]

	// if is full, draw shape and reset shape
	if(pt_index < 0)
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da09      	bge.n	800134c <add_pt_to_shape+0x8c>
	{
		draw_shape(shape, size); // keep as original size
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f80b 	bl	8001358 <draw_shape>
		reset_this_shape(shape, size_to_use);
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f95f 	bl	800160a <reset_this_shape>
	}

}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000638 	.word	0x20000638

08001358 <draw_shape>:

// draws the given shape
void draw_shape(point* shape, int size)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	// check to see which shape this is
	switch(size)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d009      	beq.n	800137c <draw_shape+0x24>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b04      	cmp	r3, #4
 800136c:	dc1c      	bgt.n	80013a8 <draw_shape+0x50>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d01b      	beq.n	80013ac <draw_shape+0x54>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d01a      	beq.n	80013b0 <draw_shape+0x58>
		break;
	case 4: // square
		draw_rect(shape[0], shape[1]);
		break;
	default:
		break;
 800137a:	e015      	b.n	80013a8 <draw_shape+0x50>
		draw_rect(shape[0], shape[1]);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1c9a      	adds	r2, r3, #2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7811      	ldrb	r1, [r2, #0]
 8001384:	7852      	ldrb	r2, [r2, #1]
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	4311      	orrs	r1, r2
 800138a:	2200      	movs	r2, #0
 800138c:	f361 020f 	bfi	r2, r1, #0, #16
 8001390:	7819      	ldrb	r1, [r3, #0]
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	4319      	orrs	r1, r3
 8001398:	2300      	movs	r3, #0
 800139a:	f361 030f 	bfi	r3, r1, #0, #16
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f80a 	bl	80013ba <draw_rect>
		break;
 80013a6:	e004      	b.n	80013b2 <draw_shape+0x5a>
		break;
 80013a8:	bf00      	nop
 80013aa:	e002      	b.n	80013b2 <draw_shape+0x5a>
		break;
 80013ac:	bf00      	nop
 80013ae:	e000      	b.n	80013b2 <draw_shape+0x5a>
		break;
 80013b0:	bf00      	nop
	}
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <draw_rect>:

}

// draws a rectangle with the two points as opposite corners
void draw_rect(point p1, point p2)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	80b8      	strh	r0, [r7, #4]
 80013c2:	8039      	strh	r1, [r7, #0]
	// variables
	uint8_t xmin = get_min(p1.x, p2.x);
 80013c4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f997 2000 	ldrsb.w	r2, [r7]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f886 	bl	80014e4 <get_min>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
	uint8_t xmax = get_max(p1.x, p2.x);
 80013dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f997 2000 	ldrsb.w	r2, [r7]
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f88f 	bl	800150e <get_max>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73bb      	strb	r3, [r7, #14]
	uint8_t ymin = get_min(p1.y, p2.y);
 80013f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f86e 	bl	80014e4 <get_min>
 8001408:	4603      	mov	r3, r0
 800140a:	737b      	strb	r3, [r7, #13]
	uint8_t ymax = get_max(p1.y, p2.y);
 800140c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f877 	bl	800150e <get_max>
 8001420:	4603      	mov	r3, r0
 8001422:	733b      	strb	r3, [r7, #12]

	// draw left vertical line
	draw_vertical_line(ymin, ymax, xmin);
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	7b39      	ldrb	r1, [r7, #12]
 8001428:	7b7b      	ldrb	r3, [r7, #13]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f816 	bl	800145c <draw_vertical_line>
	// draw right vertical line
	draw_vertical_line(ymin, ymax, xmax);
 8001430:	7bba      	ldrb	r2, [r7, #14]
 8001432:	7b39      	ldrb	r1, [r7, #12]
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f810 	bl	800145c <draw_vertical_line>
	// draw top line
	draw_horizontal_line(xmin, xmax, ymin);
 800143c:	7b7a      	ldrb	r2, [r7, #13]
 800143e:	7bb9      	ldrb	r1, [r7, #14]
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f82c 	bl	80014a0 <draw_horizontal_line>
	// draw bottom line
	draw_horizontal_line(xmin, xmax, ymax);
 8001448:	7b3a      	ldrb	r2, [r7, #12]
 800144a:	7bb9      	ldrb	r1, [r7, #14]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f826 	bl	80014a0 <draw_horizontal_line>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <draw_vertical_line>:

// draws a vertical line given ymin, ymax, and x values
void draw_vertical_line(uint8_t ymin, uint8_t ymax, uint8_t xconst)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	460b      	mov	r3, r1
 8001468:	71bb      	strb	r3, [r7, #6]
 800146a:	4613      	mov	r3, r2
 800146c:	717b      	strb	r3, [r7, #5]
	for(int y = ymin; y <= ymax; y++)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e00a      	b.n	800148a <draw_vertical_line+0x2e>
	{
		draw_pixel(xconst, y, draw_color);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	b2d9      	uxtb	r1, r3
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <draw_vertical_line+0x40>)
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f962 	bl	8001748 <draw_pixel>
	for(int y = ymin; y <= ymax; y++)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	429a      	cmp	r2, r3
 8001490:	ddf0      	ble.n	8001474 <draw_vertical_line+0x18>
	}
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000004 	.word	0x20000004

080014a0 <draw_horizontal_line>:

// draws a horizontal line given the xmin, xmax and y values
void draw_horizontal_line(uint8_t xmin, uint8_t xmax, uint8_t yconst)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	460b      	mov	r3, r1
 80014ac:	71bb      	strb	r3, [r7, #6]
 80014ae:	4613      	mov	r3, r2
 80014b0:	717b      	strb	r3, [r7, #5]
	for(int x = xmin; x <= xmax; x++)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00a      	b.n	80014ce <draw_horizontal_line+0x2e>
	{
		draw_pixel(x, yconst, draw_color);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <draw_horizontal_line+0x40>)
 80014be:	7979      	ldrb	r1, [r7, #5]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f940 	bl	8001748 <draw_pixel>
	for(int x = xmin; x <= xmax; x++)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	ddf0      	ble.n	80014b8 <draw_horizontal_line+0x18>
	}
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000004 	.word	0x20000004

080014e4 <get_min>:

// gets the maximum of two uint8_t values
uint8_t get_min(uint8_t a, uint8_t b)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
	if(a < b) return a;
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	79bb      	ldrb	r3, [r7, #6]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d201      	bcs.n	8001500 <get_min+0x1c>
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	e000      	b.n	8001502 <get_min+0x1e>
	else return b;
 8001500:	79bb      	ldrb	r3, [r7, #6]
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <get_max>:

// gets the minimum of two uint8_t values
uint8_t get_max(uint8_t a, uint8_t b)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	460a      	mov	r2, r1
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	4613      	mov	r3, r2
 800151c:	71bb      	strb	r3, [r7, #6]
	if(a > b) return a;
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	429a      	cmp	r2, r3
 8001524:	d901      	bls.n	800152a <get_max+0x1c>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	e000      	b.n	800152c <get_max+0x1e>
	else return b;
 800152a:	79bb      	ldrb	r3, [r7, #6]
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <get_shape_index>:
	return numerator / denominator;
}

// returns -1 or the index of the shape that isn't set yet
int8_t get_shape_index(point* shape, int size)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	uint8_t pt_index = -1;
 8001542:	23ff      	movs	r3, #255	; 0xff
 8001544:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < size; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	e014      	b.n	8001576 <get_shape_index+0x3e>
	{
		if(shape[i].x < 0 || shape[i].y < 0)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db07      	blt.n	800156c <get_shape_index+0x34>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da01      	bge.n	8001570 <get_shape_index+0x38>
		{
			pt_index = i;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < size; i++)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3301      	adds	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbe6      	blt.n	800154c <get_shape_index+0x14>
		}
	}
	return pt_index;
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <reset_shapes>:

// resets the shapes to their defaults, coordinates = -1
void reset_shapes(point line[2], point square[2], point triangle[3])
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
	line[0].x = -1;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	701a      	strb	r2, [r3, #0]
	line[0].y = -1;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	705a      	strb	r2, [r3, #1]
	line[1].x = -1;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3302      	adds	r3, #2
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	701a      	strb	r2, [r3, #0]
	line[1].y = -1;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3302      	adds	r3, #2
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	705a      	strb	r2, [r3, #1]

	square[0].x = -1;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	701a      	strb	r2, [r3, #0]
	square[0].y = -1;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	705a      	strb	r2, [r3, #1]
	square[1].x = -1;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3302      	adds	r3, #2
 80015c6:	22ff      	movs	r2, #255	; 0xff
 80015c8:	701a      	strb	r2, [r3, #0]
	square[1].y = -1;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3302      	adds	r3, #2
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	705a      	strb	r2, [r3, #1]

	triangle[0].x = -1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	22ff      	movs	r2, #255	; 0xff
 80015d6:	701a      	strb	r2, [r3, #0]
	triangle[0].y = -1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	22ff      	movs	r2, #255	; 0xff
 80015dc:	705a      	strb	r2, [r3, #1]
	triangle[1].x = -1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3302      	adds	r3, #2
 80015e2:	22ff      	movs	r2, #255	; 0xff
 80015e4:	701a      	strb	r2, [r3, #0]
	triangle[1].x = -1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3302      	adds	r3, #2
 80015ea:	22ff      	movs	r2, #255	; 0xff
 80015ec:	701a      	strb	r2, [r3, #0]
	triangle[2].x = -1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3304      	adds	r3, #4
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	701a      	strb	r2, [r3, #0]
	triangle[2].x = -1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	701a      	strb	r2, [r3, #0]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <reset_this_shape>:

// resets the vars of this shape
void reset_this_shape(point* shape, int size)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e00e      	b.n	8001638 <reset_this_shape+0x2e>
	{
		shape[i].x = -1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	701a      	strb	r2, [r3, #0]
		shape[i].y = -1;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	22ff      	movs	r2, #255	; 0xff
 8001630:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < size; i++)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbec      	blt.n	800161a <reset_this_shape+0x10>
	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <check_color>:

// returns 1 if color at point in matrix is same as input, returns 0 if not
uint8_t check_color(point pt, color c)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	80b8      	strh	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	// check if point is inside the matrix
	if(pt.x >= 0 && pt.x < NUM_COLS && pt.y >= 0 && pt.y < NUM_ROWS)
 800165a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db31      	blt.n	80016c6 <check_color+0x76>
 8001662:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001666:	2b1f      	cmp	r3, #31
 8001668:	dc2d      	bgt.n	80016c6 <check_color+0x76>
 800166a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db29      	blt.n	80016c6 <check_color+0x76>
 8001672:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	dc25      	bgt.n	80016c6 <check_color+0x76>
	{
		color mx_color = matrix_buffer[pt.x][pt.y];
 800167a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001684:	4913      	ldr	r1, [pc, #76]	; (80016d4 <check_color+0x84>)
 8001686:	461a      	mov	r2, r3
 8001688:	0052      	lsls	r2, r2, #1
 800168a:	441a      	add	r2, r3
 800168c:	4603      	mov	r3, r0
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4403      	add	r3, r0
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	8811      	ldrh	r1, [r2, #0]
 800169e:	7892      	ldrb	r2, [r2, #2]
 80016a0:	8019      	strh	r1, [r3, #0]
 80016a2:	709a      	strb	r2, [r3, #2]
		return mx_color.r == c.r && mx_color.g == c.g && mx_color.b == c.b;
 80016a4:	7b3a      	ldrb	r2, [r7, #12]
 80016a6:	783b      	ldrb	r3, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d109      	bne.n	80016c0 <check_color+0x70>
 80016ac:	7b7a      	ldrb	r2, [r7, #13]
 80016ae:	787b      	ldrb	r3, [r7, #1]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d105      	bne.n	80016c0 <check_color+0x70>
 80016b4:	7bba      	ldrb	r2, [r7, #14]
 80016b6:	78bb      	ldrb	r3, [r7, #2]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d101      	bne.n	80016c0 <check_color+0x70>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <check_color+0x72>
 80016c0:	2300      	movs	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	e000      	b.n	80016c8 <check_color+0x78>
	}
	return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000038 	.word	0x20000038

080016d8 <clear_pixel>:

// removes the pixel at the input coordinates from the buffer then updates the display
void clear_pixel(uint8_t x, uint8_t y)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	matrix_buffer[x][y] = BLACK;
 80016e8:	79f9      	ldrb	r1, [r7, #7]
 80016ea:	79b8      	ldrb	r0, [r7, #6]
 80016ec:	4c15      	ldr	r4, [pc, #84]	; (8001744 <clear_pixel+0x6c>)
 80016ee:	4602      	mov	r2, r0
 80016f0:	0052      	lsls	r2, r2, #1
 80016f2:	4402      	add	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	4423      	add	r3, r4
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	4c0f      	ldr	r4, [pc, #60]	; (8001744 <clear_pixel+0x6c>)
 8001706:	4602      	mov	r2, r0
 8001708:	0052      	lsls	r2, r2, #1
 800170a:	4402      	add	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	440b      	add	r3, r1
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	4423      	add	r3, r4
 8001718:	3301      	adds	r3, #1
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	4c09      	ldr	r4, [pc, #36]	; (8001744 <clear_pixel+0x6c>)
 8001720:	4602      	mov	r2, r0
 8001722:	0052      	lsls	r2, r2, #1
 8001724:	4402      	add	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	440b      	add	r3, r1
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	4423      	add	r3, r4
 8001732:	3302      	adds	r3, #2
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
	update_display();
 8001738:	f000 f8a0 	bl	800187c <update_display>
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	20000038 	.word	0x20000038

08001748 <draw_pixel>:

// draws the selected color at the input coordinate then updates display
void draw_pixel(uint8_t x, uint8_t y, color c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
	matrix_buffer[x][y] = c;
 8001758:	79f9      	ldrb	r1, [r7, #7]
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <draw_pixel+0x40>)
 800175e:	461a      	mov	r2, r3
 8001760:	0052      	lsls	r2, r2, #1
 8001762:	441a      	add	r2, r3
 8001764:	460b      	mov	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	440b      	add	r3, r1
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	4403      	add	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	463b      	mov	r3, r7
 8001774:	8819      	ldrh	r1, [r3, #0]
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	8011      	strh	r1, [r2, #0]
 800177a:	7093      	strb	r3, [r2, #2]
	update_display();
 800177c:	f000 f87e 	bl	800187c <update_display>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000038 	.word	0x20000038

0800178c <fill_matrix>:

// fills the matrix with the selected color
void fill_matrix(color c)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	// variables
	uint8_t row, col;

	// loop through matrix
	for(col = 0; col < NUM_COLS; col++)
 8001794:	2300      	movs	r3, #0
 8001796:	73bb      	strb	r3, [r7, #14]
 8001798:	e01d      	b.n	80017d6 <fill_matrix+0x4a>
	{
		for(row = 0; row < NUM_ROWS; row++)
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e014      	b.n	80017ca <fill_matrix+0x3e>
		{
			matrix_buffer[col][row] = c;
 80017a0:	7bb9      	ldrb	r1, [r7, #14]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <fill_matrix+0x60>)
 80017a6:	461a      	mov	r2, r3
 80017a8:	0052      	lsls	r2, r2, #1
 80017aa:	441a      	add	r2, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	4403      	add	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	8011      	strh	r1, [r2, #0]
 80017c2:	7093      	strb	r3, [r2, #2]
		for(row = 0; row < NUM_ROWS; row++)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	3301      	adds	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d9e7      	bls.n	80017a0 <fill_matrix+0x14>
	for(col = 0; col < NUM_COLS; col++)
 80017d0:	7bbb      	ldrb	r3, [r7, #14]
 80017d2:	3301      	adds	r3, #1
 80017d4:	73bb      	strb	r3, [r7, #14]
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	2b1f      	cmp	r3, #31
 80017da:	d9de      	bls.n	800179a <fill_matrix+0xe>
		}
	}
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000038 	.word	0x20000038

080017f0 <clear_matrix>:

// clears the matrix buffer and updates the display
void clear_matrix()
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
	// variables
	uint8_t row, col;

	// loop through matrix
	for(col = 0; col < NUM_COLS; col++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	71bb      	strb	r3, [r7, #6]
 80017fa:	e033      	b.n	8001864 <clear_matrix+0x74>
	{
		for(row = 0; row < NUM_ROWS; row++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	e02a      	b.n	8001858 <clear_matrix+0x68>
		{
			matrix_buffer[col][row] = BLACK;
 8001802:	79b9      	ldrb	r1, [r7, #6]
 8001804:	79f8      	ldrb	r0, [r7, #7]
 8001806:	4c1c      	ldr	r4, [pc, #112]	; (8001878 <clear_matrix+0x88>)
 8001808:	4602      	mov	r2, r0
 800180a:	0052      	lsls	r2, r2, #1
 800180c:	4402      	add	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	4413      	add	r3, r2
 8001818:	4423      	add	r3, r4
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	4c16      	ldr	r4, [pc, #88]	; (8001878 <clear_matrix+0x88>)
 8001820:	4602      	mov	r2, r0
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	4402      	add	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	440b      	add	r3, r1
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	4423      	add	r3, r4
 8001832:	3301      	adds	r3, #1
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	4c0f      	ldr	r4, [pc, #60]	; (8001878 <clear_matrix+0x88>)
 800183a:	4602      	mov	r2, r0
 800183c:	0052      	lsls	r2, r2, #1
 800183e:	4402      	add	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	4423      	add	r3, r4
 800184c:	3302      	adds	r3, #2
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
		for(row = 0; row < NUM_ROWS; row++)
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	3301      	adds	r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d9d1      	bls.n	8001802 <clear_matrix+0x12>
	for(col = 0; col < NUM_COLS; col++)
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	3301      	adds	r3, #1
 8001862:	71bb      	strb	r3, [r7, #6]
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	2b1f      	cmp	r3, #31
 8001868:	d9c8      	bls.n	80017fc <clear_matrix+0xc>
		}
	}

	// updates the display
	update_display();
 800186a:	f000 f807 	bl	800187c <update_display>
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	bf00      	nop
 8001878:	20000038 	.word	0x20000038

0800187c <update_display>:

// updates the display with the matrix buffer
void update_display()
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	// variables
	uint8_t row, col;

	// initialize matrix control variables
	set_OE(HIGH); // disable output
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff f898 	bl	80009b8 <set_OE>
	set_LAT(HIGH); // latch current data
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff f879 	bl	8000980 <set_LAT>

	// loop through the row sections
	for(row = 0; row < NUM_ROWS / 2; row++)
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	e050      	b.n	8001936 <update_display+0xba>
	{
		// get ready to clock in a section (2 rows) of data
		set_OE(LOW); // enables output
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff f88f 	bl	80009b8 <set_OE>
		set_LAT(LOW); // removes latch from previous data
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff f870 	bl	8000980 <set_LAT>

		// loop through the columns of the row
		for(col = 0; col < NUM_COLS; col++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	71bb      	strb	r3, [r7, #6]
 80018a4:	e037      	b.n	8001916 <update_display+0x9a>
		{
			// sets the desired upper, lower color
			set_RGB_val(matrix_buffer[col][row], matrix_buffer[col][row + (NUM_ROWS / 2)]);
 80018a6:	79b8      	ldrb	r0, [r7, #6]
 80018a8:	79fc      	ldrb	r4, [r7, #7]
 80018aa:	79b9      	ldrb	r1, [r7, #6]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	3308      	adds	r3, #8
 80018b0:	4d25      	ldr	r5, [pc, #148]	; (8001948 <update_display+0xcc>)
 80018b2:	461a      	mov	r2, r3
 80018b4:	0052      	lsls	r2, r2, #1
 80018b6:	441a      	add	r2, r3
 80018b8:	460b      	mov	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	18e9      	adds	r1, r5, r3
 80018c4:	4d20      	ldr	r5, [pc, #128]	; (8001948 <update_display+0xcc>)
 80018c6:	4622      	mov	r2, r4
 80018c8:	0052      	lsls	r2, r2, #1
 80018ca:	4422      	add	r2, r4
 80018cc:	4603      	mov	r3, r0
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4403      	add	r3, r0
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	442b      	add	r3, r5
 80018d8:	780a      	ldrb	r2, [r1, #0]
 80018da:	7848      	ldrb	r0, [r1, #1]
 80018dc:	0200      	lsls	r0, r0, #8
 80018de:	4302      	orrs	r2, r0
 80018e0:	7889      	ldrb	r1, [r1, #2]
 80018e2:	0409      	lsls	r1, r1, #16
 80018e4:	4311      	orrs	r1, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	f361 0217 	bfi	r2, r1, #0, #24
 80018ec:	7819      	ldrb	r1, [r3, #0]
 80018ee:	7858      	ldrb	r0, [r3, #1]
 80018f0:	0200      	lsls	r0, r0, #8
 80018f2:	4301      	orrs	r1, r0
 80018f4:	789b      	ldrb	r3, [r3, #2]
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	4319      	orrs	r1, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	f361 0317 	bfi	r3, r1, #0, #24
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f88a 	bl	8000a1c <set_RGB_val>

			// drive the clock
			drive_matrix_clk();
 8001908:	f7ff f872 	bl	80009f0 <drive_matrix_clk>

			// clear the previous values in the ODR
			clear_RGB_val(); // if isn't cleared, will fill entire row
 800190c:	f7ff f8aa 	bl	8000a64 <clear_RGB_val>
		for(col = 0; col < NUM_COLS; col++)
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	3301      	adds	r3, #1
 8001914:	71bb      	strb	r3, [r7, #6]
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	2b1f      	cmp	r3, #31
 800191a:	d9c4      	bls.n	80018a6 <update_display+0x2a>
		}

		// allow matrix to hold data
		set_OE(HIGH); // disable output, moving to another row
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff f84b 	bl	80009b8 <set_OE>
		set_LAT(HIGH); // latch current data, moving to another row
 8001922:	2001      	movs	r0, #1
 8001924:	f7ff f82c 	bl	8000980 <set_LAT>

		// set row selection
		set_matrix_section(row);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fff4 	bl	8000918 <set_matrix_section>
	for(row = 0; row < NUM_ROWS / 2; row++)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	3301      	adds	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b07      	cmp	r3, #7
 800193a:	d9ab      	bls.n	8001894 <update_display+0x18>
	}
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	20000038 	.word	0x20000038

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_MspInit+0x44>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_MspInit+0x44>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6613      	str	r3, [r2, #96]	; 0x60
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_MspInit+0x44>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_MspInit+0x44>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_MspInit+0x44>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 f89a 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f000 ffa7 	bl	800298c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff f8cb 	bl	8000bd8 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a50:	08002a94 	.word	0x08002a94
  ldr r2, =_sbss
 8001a54:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001a58:	20000648 	.word	0x20000648

08001a5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_Init+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_Init+0x3c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f920 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 f80f 	bl	8001aa0 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	e001      	b.n	8001a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8e:	f7ff ff5d 	bl	800194c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_InitTick+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_InitTick+0x70>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f91d 	bl	8001d0a <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d809      	bhi.n	8001af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae4:	f000 f8f5 	bl	8001cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_InitTick+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e004      	b.n	8001b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000018 	.word	0x20000018
 8001b10:	20000010 	.word	0x20000010
 8001b14:	20000014 	.word	0x20000014

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000018 	.word	0x20000018
 8001b3c:	20000644 	.word	0x20000644

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000644 	.word	0x20000644

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff47 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff5c 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff8e 	bl	8001c10 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffb0 	bl	8001c78 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40007000 	.word	0x40007000

08001d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4e:	d130      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d5c:	d038      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d66:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2232      	movs	r2, #50	; 0x32
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	3301      	adds	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d84:	e002      	b.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d98:	d102      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f2      	bne.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d110      	bne.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e00f      	b.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbe:	d007      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc8:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40007000 	.word	0x40007000
 8001de4:	20000010 	.word	0x20000010
 8001de8:	431bde83 	.word	0x431bde83

08001dec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e3ca      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b97      	ldr	r3, [pc, #604]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e08:	4b94      	ldr	r3, [pc, #592]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80e4 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4a>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	f040 808b 	bne.w	8001f44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	f040 8087 	bne.w	8001f44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x62>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e3a2      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_RCC_OscConfig+0x7c>
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_OscConfig+0x88>
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d223      	bcs.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fd1d 	bl	80028bc <RCC_SetFlashLatencyFromMSIRange>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e383      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a72      	ldr	r2, [pc, #456]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	496d      	ldr	r1, [pc, #436]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eaa:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	4968      	ldr	r1, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
 8001ebe:	e025      	b.n	8001f0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4960      	ldr	r1, [pc, #384]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	495b      	ldr	r1, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fcdd 	bl	80028bc <RCC_SetFlashLatencyFromMSIRange>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e343      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 fc4a 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b52      	ldr	r3, [pc, #328]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	4950      	ldr	r1, [pc, #320]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a4e      	ldr	r2, [pc, #312]	; (8002064 <HAL_RCC_OscConfig+0x278>)
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fdb5 	bl	8001aa0 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d052      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	e327      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d032      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f4c:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a42      	ldr	r2, [pc, #264]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fdf2 	bl	8001b40 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f60:	f7ff fdee 	bl	8001b40 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e310      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a36      	ldr	r2, [pc, #216]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4931      	ldr	r1, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	492c      	ldr	r1, [pc, #176]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e01a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fdbf 	bl	8001b40 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fdbb 	bl	8001b40 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e2dd      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x1da>
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d074      	beq.n	80020de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d005      	beq.n	8002006 <HAL_RCC_OscConfig+0x21a>
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d10e      	bne.n	800201e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d10b      	bne.n	800201e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d064      	beq.n	80020dc <HAL_RCC_OscConfig+0x2f0>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d160      	bne.n	80020dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e2ba      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x24a>
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x270>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e026      	b.n	8002084 <HAL_RCC_OscConfig+0x298>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203e:	d115      	bne.n	800206c <HAL_RCC_OscConfig+0x280>
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a05      	ldr	r2, [pc, #20]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8002046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_OscConfig+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a02      	ldr	r2, [pc, #8]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8002052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e014      	b.n	8002084 <HAL_RCC_OscConfig+0x298>
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	08002a4c 	.word	0x08002a4c
 8002064:	20000010 	.word	0x20000010
 8002068:	20000014 	.word	0x20000014
 800206c:	4ba0      	ldr	r3, [pc, #640]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a9f      	ldr	r2, [pc, #636]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b9d      	ldr	r3, [pc, #628]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a9c      	ldr	r2, [pc, #624]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff fd58 	bl	8001b40 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fd54 	bl	8001b40 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e276      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a6:	4b92      	ldr	r3, [pc, #584]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x2a8>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff fd44 	bl	8001b40 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fd40 	bl	8001b40 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e262      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ce:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x2d0>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d060      	beq.n	80021ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x310>
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d119      	bne.n	800212a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d116      	bne.n	800212a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fc:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x328>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e23f      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	4973      	ldr	r1, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	e040      	b.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d023      	beq.n	800217a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002132:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6e      	ldr	r2, [pc, #440]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7ff fcff 	bl	8001b40 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7ff fcfb 	bl	8001b40 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e21d      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	495f      	ldr	r1, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e018      	b.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff fcdb 	bl	8001b40 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff fcd7 	bl	8001b40 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1f9      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03c      	beq.n	8002232 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01c      	beq.n	80021fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	4a4a      	ldr	r2, [pc, #296]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff fcb6 	bl	8001b40 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff fcb2 	bl	8001b40 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1d4      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ef      	beq.n	80021d8 <HAL_RCC_OscConfig+0x3ec>
 80021f8:	e01b      	b.n	8002232 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002200:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7ff fc99 	bl	8001b40 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7ff fc95 	bl	8001b40 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1b7      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ef      	bne.n	8002212 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a6 	beq.w	800238c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	; 0x58
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_OscConfig+0x508>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d118      	bne.n	80022aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_RCC_OscConfig+0x508>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x508>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002284:	f7ff fc5c 	bl	8001b40 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7ff fc58 	bl	8001b40 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e17a      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x508>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4d8>
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c2:	e029      	b.n	8002318 <HAL_RCC_OscConfig+0x52c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d115      	bne.n	80022f8 <HAL_RCC_OscConfig+0x50c>
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x52c>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	4b9c      	ldr	r3, [pc, #624]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	4a9b      	ldr	r2, [pc, #620]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002308:	4b98      	ldr	r3, [pc, #608]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	4a97      	ldr	r2, [pc, #604]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d016      	beq.n	800234e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7ff fc0e 	bl	8001b40 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7ff fc0a 	bl	8001b40 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e12a      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ed      	beq.n	8002328 <HAL_RCC_OscConfig+0x53c>
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7ff fbf7 	bl	8001b40 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7ff fbf3 	bl	8001b40 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e113      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800236c:	4b7f      	ldr	r3, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ed      	bne.n	8002356 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b7a      	ldr	r3, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	4a79      	ldr	r2, [pc, #484]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80fe 	beq.w	8002592 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 80d0 	bne.w	8002540 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023a0:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d130      	bne.n	8002416 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	3b01      	subs	r3, #1
 80023c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d127      	bne.n	8002416 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11f      	bne.n	8002416 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e0:	2a07      	cmp	r2, #7
 80023e2:	bf14      	ite	ne
 80023e4:	2201      	movne	r2, #1
 80023e6:	2200      	moveq	r2, #0
 80023e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d113      	bne.n	8002416 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	3b01      	subs	r3, #1
 80023fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d109      	bne.n	8002416 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d06e      	beq.n	80024f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	d069      	beq.n	80024f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0ad      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002444:	f7ff fb7c 	bl	8001b40 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff fb78 	bl	8001b40 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e09a      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <HAL_RCC_OscConfig+0x784>)
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800247a:	3a01      	subs	r2, #1
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002484:	0212      	lsls	r2, r2, #8
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800248c:	0852      	lsrs	r2, r2, #1
 800248e:	3a01      	subs	r2, #1
 8002490:	0552      	lsls	r2, r2, #21
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	3a01      	subs	r2, #1
 800249c:	0652      	lsls	r2, r2, #25
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a4:	0912      	lsrs	r2, r2, #4
 80024a6:	0452      	lsls	r2, r2, #17
 80024a8:	430a      	orrs	r2, r1
 80024aa:	4930      	ldr	r1, [pc, #192]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2d      	ldr	r2, [pc, #180]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c8:	f7ff fb3a 	bl	8001b40 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff fb36 	bl	8001b40 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e058      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ee:	e050      	b.n	8002592 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e04f      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x780>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d148      	bne.n	8002592 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002516:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002518:	f7ff fb12 	bl	8001b40 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7ff fb0e 	bl	8001b40 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e030      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x734>
 800253e:	e028      	b.n	8002592 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d023      	beq.n	800258e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x780>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_RCC_OscConfig+0x780>)
 800254c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7ff faf5 	bl	8001b40 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e00c      	b.n	8002574 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff faf1 	bl	8001b40 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d905      	bls.n	8002574 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
 800256c:	40021000 	.word	0x40021000
 8002570:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x7b0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_OscConfig+0x7b0>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4905      	ldr	r1, [pc, #20]	; (800259c <HAL_RCC_OscConfig+0x7b0>)
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_OscConfig+0x7b4>)
 8002588:	4013      	ands	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
 800258c:	e001      	b.n	8002592 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	feeefffc 	.word	0xfeeefffc

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0e7      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b75      	ldr	r3, [pc, #468]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b72      	ldr	r3, [pc, #456]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4970      	ldr	r1, [pc, #448]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b6e      	ldr	r3, [pc, #440]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0cf      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d010      	beq.n	8002616 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002600:	429a      	cmp	r2, r3
 8002602:	d908      	bls.n	8002616 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4960      	ldr	r1, [pc, #384]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04c      	beq.n	80026bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d121      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0a6      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002642:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d115      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e09a      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265a:	4b4e      	ldr	r3, [pc, #312]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e08e      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e086      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4943      	ldr	r1, [pc, #268]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7ff fa58 	bl	8001b40 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff fa54 	bl	8001b40 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e06e      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b31      	ldr	r3, [pc, #196]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d208      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	492b      	ldr	r1, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d210      	bcs.n	800271a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 0207 	bic.w	r2, r3, #7
 8002700:	4923      	ldr	r1, [pc, #140]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e036      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4918      	ldr	r1, [pc, #96]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4910      	ldr	r1, [pc, #64]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002758:	f000 f824 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x1f4>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1f8>)
 8002776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1fc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f98f 	bl	8001aa0 <HAL_InitTick>
 8002782:	4603      	mov	r3, r0
 8002784:	72fb      	strb	r3, [r7, #11]

  return status;
 8002786:	7afb      	ldrb	r3, [r7, #11]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	08002a4c 	.word	0x08002a4c
 800279c:	20000010 	.word	0x20000010
 80027a0:	20000014 	.word	0x20000014

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d121      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d11e      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002814:	e00a      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d102      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e004      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d101      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800282a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d134      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0xa6>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d003      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0xac>
 8002848:	e005      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800284c:	617b      	str	r3, [r7, #20]
      break;
 800284e:	e005      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002852:	617b      	str	r3, [r7, #20]
      break;
 8002854:	e002      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	617b      	str	r3, [r7, #20]
      break;
 800285a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	3301      	adds	r3, #1
 8002868:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	0e5b      	lsrs	r3, r3, #25
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	3301      	adds	r3, #1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800289c:	69bb      	ldr	r3, [r7, #24]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08002a5c 	.word	0x08002a5c
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028d4:	f7ff fa26 	bl	8001d24 <HAL_PWREx_GetVoltageRange>
 80028d8:	6178      	str	r0, [r7, #20]
 80028da:	e014      	b.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a24      	ldr	r2, [pc, #144]	; (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028f4:	f7ff fa16 	bl	8001d24 <HAL_PWREx_GetVoltageRange>
 80028f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290c:	d10b      	bne.n	8002926 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d919      	bls.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2ba0      	cmp	r3, #160	; 0xa0
 8002918:	d902      	bls.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800291a:	2302      	movs	r3, #2
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e013      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002920:	2301      	movs	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e010      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d902      	bls.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800292c:	2303      	movs	r3, #3
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e00a      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d102      	bne.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002938:	2302      	movs	r3, #2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e004      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b70      	cmp	r3, #112	; 0x70
 8002942:	d101      	bne.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002944:	2301      	movs	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 0207 	bic.w	r2, r3, #7
 8002950:	4909      	ldr	r1, [pc, #36]	; (8002978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	429a      	cmp	r2, r3
 8002964:	d001      	beq.n	800296a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	40022000 	.word	0x40022000

0800297c <memset>:
 800297c:	4402      	add	r2, r0
 800297e:	4603      	mov	r3, r0
 8002980:	4293      	cmp	r3, r2
 8002982:	d100      	bne.n	8002986 <memset+0xa>
 8002984:	4770      	bx	lr
 8002986:	f803 1b01 	strb.w	r1, [r3], #1
 800298a:	e7f9      	b.n	8002980 <memset+0x4>

0800298c <__libc_init_array>:
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	4d0d      	ldr	r5, [pc, #52]	; (80029c4 <__libc_init_array+0x38>)
 8002990:	4c0d      	ldr	r4, [pc, #52]	; (80029c8 <__libc_init_array+0x3c>)
 8002992:	1b64      	subs	r4, r4, r5
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	2600      	movs	r6, #0
 8002998:	42a6      	cmp	r6, r4
 800299a:	d109      	bne.n	80029b0 <__libc_init_array+0x24>
 800299c:	4d0b      	ldr	r5, [pc, #44]	; (80029cc <__libc_init_array+0x40>)
 800299e:	4c0c      	ldr	r4, [pc, #48]	; (80029d0 <__libc_init_array+0x44>)
 80029a0:	f000 f818 	bl	80029d4 <_init>
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	2600      	movs	r6, #0
 80029aa:	42a6      	cmp	r6, r4
 80029ac:	d105      	bne.n	80029ba <__libc_init_array+0x2e>
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
 80029b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b4:	4798      	blx	r3
 80029b6:	3601      	adds	r6, #1
 80029b8:	e7ee      	b.n	8002998 <__libc_init_array+0xc>
 80029ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80029be:	4798      	blx	r3
 80029c0:	3601      	adds	r6, #1
 80029c2:	e7f2      	b.n	80029aa <__libc_init_array+0x1e>
 80029c4:	08002a8c 	.word	0x08002a8c
 80029c8:	08002a8c 	.word	0x08002a8c
 80029cc:	08002a8c 	.word	0x08002a8c
 80029d0:	08002a90 	.word	0x08002a90

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
